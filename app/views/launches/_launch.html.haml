
%ul#launch_tabs.subsection_tabs
  %li.tab
    %a{ :href => "#settings" }
      settings
  %li.tab
    %a{ :href => "#options" }
      options
  %li.tab
    %a{ :id => "control_tab", :href => "#control"}
      control
  %li.tab
    %a{ :id => "info_tab", :href => "#info"}
      info
#settings.tabpanel
  =@input_html

#options.tabpanel
  -form_for @launch do |f|
    = f.error_messages
    =f.hidden_field :subapp_id
    .prop_row
      .label
        = f.label :name 
      .field
        = f.text_field :name, :size => 40
    .prop_row
      .label
        dry run
      .field
        = check_box_tag :dry_run
    .prop_row
      .label
        parent launch
      .field
        = (@launch.parent ? @launch.parent.name : '-')
    .prop_row
      .label
        launch type
      .field
        = @launch.subapp.name
        #subapp_id{:style => 'display:none'}<
          =@launch.subapp.id
    .prop_row
      .label
        = f.label :settings 
      .field
        = f.text_area :settings, :rows => 2
    = f.submit 'send', :onclick => 'collect_and_submit()'
    %input{:type => 'button', :onclick=> 'collect_and_submit();', :value => 'refresh settings'}
    

#control.tabpanel
  #jobs
  
#info.tabpanel
  .prop_row
    .label
      command
    #info_command.field
      
  .prop_row
    .label
      command arguments
    #info_command_args.field
    
  #launch_files    

          
  #launch_sequences
      
    
:javascript

  new Control.Tabs('launch_tabs');
  
  $('control_tab').observe('click', function(event){
    new Ajax.Request('#{url_for(:controller => :jobs, :action => :select, :launch_id => @launch.id)}');
  });
  
  $('info_tab').observe('click', function(event){
  
    var launch_params = prepareSubmit()
    var subapp_id = $('subapp_id').innerHTML
    
    var url = '#{url_for(:controller => :subapps, :action => 'show', :id => nil)}' + '/' + subapp_id;
    
    $('info_command').innerHTML =jsonResource(url).executable
    
    if(launch_params.files){
      $$('#launch_files *').invoke('remove')
      $('launch_files').appendChild(
        NodeBuilder(
          ['div', {'class': 'group'},
            ['div', {'class': 'group_title'},
              "Launch files"
            ],
            ['table', {},
              ['tbody', {},
                ['tr', {},
                  ['th', {}, 'name'],
                  ['th', {}, 'start'],
                  ['th', {}, 'max'  ],
                  ['th', {}, 'diff']
                ]
              ].concat(
                launch_params.files.map(function(f){
                  ["tr", {'class': 'info_launch_file'},
                    ["td", {},
                      f.name
                    ],
                    ["td", {},
                      f.content
                    ]
                  ]
                }
                )
              )
            ]
          ]
        )  
      )
    }
    if(launch_params.sequences){
      $$('#launch_sequences *').invoke('remove')
      $('launch_sequences').appendChild(
        NodeBuilder(
          ['div', {'class': 'group'},
            ['div', {'class': 'group_title'},
              "Launch sequences"
            ],
            ['table', {},
              ['tbody', {},
                ['tr', {},
                  ['th', {}, 'name'],
                  ['th', {}, 'start'],
                  ['th', {}, 'max'  ],
                  ['th', {}, 'diff']
                ]
              ].concat(
                launch_params.sequences.map(function(seq){
                  return ['tr', {},
                           ['td', {}, seq.name],
                           ['td', {}, seq.start],
                           ['td', {}, seq.max],
                           ['td', {}, seq.diff]
                        ]
                })
              )
            ]
          ]
        )
      )
    }
     
     
    $('info_command_args').innerHTML = launch_params.command_args
  })
  
  function collect_and_submit(){
    
    var launch_params = prepareSubmit()
    nameFromId($('partial_form'))
    var formData = $('partial_form').serialize(true)
    var cleanFormData = {}
    $H(formData).each(function(pair){
      if(!pair.key.endsWith('_prototype')){
        cleanFormData[pair.key] = pair.value
      }
    })
    formData = cleanFormData;
    var settings  = {
      form_data: formData,
      launch_params: launch_params
    }
    var serString = Object.toJSON(settings)
    $('launch_settings').value = serString
    return true
    
  }     
  
  var settings_str = $('launch_settings').value;
  
  
  var settings = {form_data: {}, launch_params: {}}
  try{
    if(settings_str !== undefined){
      settings = settings_str.evalJSON(true)
    }
  }
  catch(e){
    //TODO log
  }
  var partial_form = $('partial_form');
  if(partial_form.preInit){
    partial_form.preInit(settings);
  }
  nameFromId($('partial_form'))

  Form.fillForm('partial_form', settings.form_data);
  $('partial_form').init(); 
  nameFromId($('partial_form')); 
  
  function readonlyMode(){
    $('partial_form').disable();
    $('partial_form').observe('click', function(event){
      alert('Be aware this is in read only mode!');
      Event.stop(event);
    })
  } 
  
  if(#{!@launch.editable?}){
    readonlyMode();
  }
  
  
   