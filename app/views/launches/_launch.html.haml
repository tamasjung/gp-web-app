
%ul#launch_tabs.subsection_tabs
  %li.tab
    %a{ :href => "#settings" }
      settings
  %li.tab
    %a{ :id => "control_tab", :href => "#control"}
      control
  %li.tab
    %a{ :id => "info_tab", :href => "#info"}
      information
#settings.tabpanel
  =@input_html

#control.tabpanel
  .panel_in_tab
    -form_for @launch do |f|
      = f.error_messages
      =f.hidden_field :subapp_id
      =f.hidden_field :settings
      =hidden_field_tag 'commit'
      %input{:type => 'hidden', :name => 'default_tab', :value => 'control'}
      .prop_row
        .label
          name 
        .field
          -if @launch.editable?
            = f.text_field :name, :size => 40, :onKeyPress => "return false"
          -else
            =@launch.name
        .long_desc{:style => 'display: none'}
          It must be unique although it is not necessary to fill it out. In case you leave it empty the portal generate
          a proper name. 
      .prop_row
        .label
          parent launch
        .field
          -if @launch.parent
            -link_options = {}
            -if @launch.state == Launch::CREATED
              -link_options ={:confirm => "Modifications will be lost, are you sure?"}
            =link_to @launch.parent.name, @launch.parent, link_options
          
          -else
            \-
        .long_desc{:style => 'display: none'}
          The 'parent' launch, if exists. It is the launch from which this one was cloned.
      .prop_row
        .label
          sub-application
          #subapp_id{:style => 'display:none'}<
            =@launch.subapp.id
        
        .field
          -if @launch.state == Launch::CREATED
            -subappname = @launch.subapp ? @launch.subapp.name : ""
            -sent_subappname = params[:subapp_lookup]
            -subappname = sent_subappname if sent_subappname
          
          
            %input#subapp_lookup{:type => 'text', :name => 'subapp_lookup', :value => subappname, :size => 40, :onKeyPress => "return noEnterKey(event)"}
            #subapp_name_choices.autocomplete
            :javascript
              new Ajax.Autocompleter("subapp_lookup", "subapp_name_choices", "#{url_for(:controller => :subapps, :action => :subapp_name_autocomplete)}", {
                paramName: "value",
                callback: function (input, query){
                  return $H({value: input.value}).toQueryString() 
                }
              });
            =link_to_function "Transpose", 'collect_and_submit(event)', :class=> 'action_link'
            =link_to "Show",  edit_subapp_path(@launch.subapp), :confirm => "Modifications will be lost, are you sure?"
          
            .long_desc{:style => 'display: none'}
              Transpose is available only if the launch is created but not started. It tries to reapply your
              launch settings to another sub-application, for example after a sub-application upgrade happened.
          -else
            =link_to @launch.subapp.name,  edit_subapp_path(@launch.subapp)
          

        .long_desc{:style => 'display: none'}
          The sub-application describes the name of the executables, the files you want to get uploaded by the 
          portal and other technical options. Click 'show' for more details.
  

  

      .prop_row
        .label
          current state
        .field
          %span
            =@launch.state.to_s.humanize
            -if @launch.available_actions.include? :refresh_state
              =link_to_function :refresh_state.to_s.humanize, 'collect_and_submit(event)', :class=> 'action_link'
        .long_desc{:style => 'display: none'}
          The state of the launch is the aggregation of the jobs' states belong to it.

        
      .prop_row
        .label
          actions
        .field
          -(@launch.available_actions - [:refresh_state]).each do |action|
            =link_to_function action.to_s.humanize, 'collect_and_submit(event)', :confirm => "Are you sure?", :class=> 'action_link'
          =link_to_function "Clone", 'collect_and_submit(event)', :class=> 'action_link' if (@launch.id && @launch.state != Launch::DESTROYING) 
        .long_desc{:style => 'display: none'}
          Cloning is a creation of new launch based on this launch.
        .long_desc{:style => 'display: none'}
          Be aware that these actions are started asynchronously, do not expect immediate result.
      -unless @launch.new_record?
        .prop_row
          .label
            portal directory
          .field
            -url = LaunchDirs.new(@launch).launch_root_url
            %a{:href => "#{url}", :target => "_blank"}
              open in new window
          .long_desc{:style => 'display: none'}
            Click to the link to see the working directory managed by the portal itself.
      -if @launch.state == Launch::FINISHED
        .prop_row
          .label
            published results
          .field
            -url = LaunchDirs.new(@launch).launch_publish_url
            %a{:href => "#{url}", :target => "_blank"}
              open in new window
          .long_desc{:style => 'display: none'}
            Click to the link to see the publish directory.        
    #jobs.group
  
#info.tabpanel
  .panel_in_tab
    .prop_row
      .label
        executable
      #info_command.field
      .long_desc{:style => 'display: none'}
        The name of the executable to run.
      
    .prop_row
      .label
        command arguments
      #info_command_args.field
      .long_desc{:style => 'display: none'}
        The command argument, might be parametric, if you are using sequences.
    
    #launch_files
    
    #launch_references
    
    #launch_sequences

        
      
    
:javascript

  var defaultTab = '#{params[:default_tab]}'

  new Control.Tabs('launch_tabs', {defaultTab: defaultTab || 'first'});
  
  function loadControlTab(){
    new Ajax.Request('#{url_for(:controller => :jobs, :action => :select, :params => {:orders => 'state ASC', :launch_id => @launch.id})}');
  }
  
  if(defaultTab == 'control'){
    loadControlTab();
  }
  
  $('control_tab').observe('click', function(event){
    loadControlTab();
  });

  
  function collect_and_submit(event){
    $('commit').value = Element.collectTextNodes(Event.element(event)).strip()
    
    var launch_params = prepareSubmit()
    nameFromId($('partial_form'))
    var formData = $('partial_form').serialize(true)
    var cleanFormData = {}
    $H(formData).each(function(pair){
      if(!pair.key.endsWith('_prototype')){
        cleanFormData[pair.key] = pair.value
      }
    })
    formData = cleanFormData;
    var settings  = {
      form_data: formData,
      launch_params: launch_params
    }
    var serString = Object.toJSON(settings)
    $('launch_settings').value = serString
    Event.element(event).up('form').submit();
    return true
    
  }     
  
  var settings_str = $('launch_settings').value;
  
  var settings = {form_data: {}, launch_params: {}}
  try{
    if(settings_str !== undefined){
      settings = settings_str.evalJSON(true)
    }
  }
  catch(e){
    //TODO log
  }
  var partial_form = $('partial_form');
  if(partial_form.preInit){
    partial_form.preInit(settings);
  }
  nameFromId($('partial_form'))

  Form.fillForm('partial_form', settings.form_data);
  $('partial_form').init(); 
  nameFromId($('partial_form')); 
  
  function readonlyMode(){
    $('partial_form').disable();
    $('partial_form').select("a").each(function(element){
      element.onclick = "return false;"
    })
  } 
  
  if(#{!@launch.editable?}){
    readonlyMode();
  }
  
  function job_search(event){
    if(isEnterKey(event)){
      new Ajax.Request("#{url_for(:controller => :jobs, :action => :select, :launch_id => @launch.id)}", {
        parameters: {'job_search': $F('job_search')}
          
        }
      );
      return false;
    }
    return true;
  }

= render :partial => 'info_tab'  
  
   