-if @launch.jobs.count > 0
  -if @launch.single
    -job = @launch.the_only_job
    .group_title
      Job
    
    .prop_row
      .label
        remote directory/id
      .field
        -#-if [Job::SENT].include? job.state
        -#  %a{:href => "#{job.proxied_address}", :target => "_blank"}
        -#    =job.proxied_address
        -#else
        =job.id_in_address
    .prop_row
      .label
        state
      .field=job.state.humanize
    .prop_row
      .label
        portal directory
      .field
        -url = JobDirs.new(job).job_root_url
        %a{:href => "#{url}", :target => "_blank"}
          open
  -else
    .group_title
      Jobs
    %div
      %span.paginate_info
        =page_entries_info(@jobs, {})
        , filtered by

      %input#job_search.search_field{:type => 'text', :name => 'job_search', :value => params[:job_search], :onKeyPress => 'return job_search(event);'}
      #job_choices.autocomplete
      :javascript
        
        new Ajax.Autocompleter("job_search", "job_choices", "#{url_for(:controller => :jobs, :action => :search_autocomplete)}", {
          paramName: "value",
          callback: function (input, query){
            return $H({value: input.value}).toQueryString()
          }
        });
        

        

    %table
      %tr
        %th
          = ordering_link "Portal", :id, params
        %th
          Remote
        %th
          = ordering_link "State/detail", :state, params
        %th
          Actions
      
      -@jobs.each_with_index do |job, idx|
        -url = JobDirs.new(job).job_root_url
        %tr{:class => (idx % 2 == 0) ? "even" : "odd"}
          %td
            %a{:href => "#{url}", :target => "_blank"}
              =job.id
          %td
            -#-if [Job::SENT].include? job.state
            -#//   %a{:href => "#{job.proxied_address}", :target => "_blank"}
            -#//     =job.id_in_address
            -#// -else
            =job.id_in_address
          %td
            =state_display(job)
          %td
            -job.available_actions.each do |action|
              .action_link= link_to_remote action.to_s, params.merge({:url => {:action => action, :id => job.id,}})

            
    =will_paginate(@jobs, :renderer => RemoteLinkRenderer, :params => params)
:javascript
  document.fire("gp:new_panel") 
