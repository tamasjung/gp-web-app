-#
  EMBEDDED_STYLE
  #initial_conditions input {
    max-width: 120px;
  }

  .xi_input {
    max-width: 1em;
    float: both;
  }
  
  EMBEDDED_STYLE

%form#partial_form.panel_in_tab
  %input{:type => "hidden", :id=>"command_args"}
  %input{:type => "hidden", :id=>"display_str"}
  %input{:type => "hidden", :id=>"sequences"}
  #model_params.group
    .group_title
      Model parameters
    .prop_row
      .label
        &mu; 
        \= m<sub>1</sub>/(m<sub>0</sub> + m<sub>1</sub>)
      .field
        %input{:type => "text", :id=>"mu", :onKeyUp=>"resetMs()", :valid_if => "isDefined(x)"}

    .prop_row
      .label
        m<sub>0</sub>
      .field
        %input{:type => "text", :id=>"m0", :onKeyUp=>"mu_calc()"}

    .prop_row
      .label
        m<sub>1</sub>
      .field
        %input{:type => "text", :id=>"m1", :onKeyUp=>"mu_calc()"}
        
    .prop_row
      .label
        dimension
      .field
        %input{:type => "radio", :id=>"dimension_2d", :name => "dimension_radio", :value => "2D", :onClick => 'two_or_three_dim()'}
          2D
        %input{:type => "radio", :id=>"dimension_3d", :name => "dimension_radio", :value => "3D", :onClick => 'two_or_three_dim()', :checked=>"true"}
          3D
        
    .prop_row
      .label
        centre
      .field
        %input{:type => "radio", :id=>"centre_astro", :name => "centre_radio", :value => "ac", :checked=>"true"}
          astrocentric
        %input{:type => "radio", :id=>"centre_bari", :name => "centre_radio", :value => "bc"}
          baricentric

    .prop_row
      .label
        change origin
      .field
        %input{:type => "checkbox", :id=>"CO"}
    

  #indikator_parametek.group
    .group_title
      Indicator parameters
    .prop_row
      .label
        type
      .field
        %input{:type => "radio", :id=>"type_lci", :name => "type_radio", :value => "lci", :onClick => 'lci_or_me()', :checked=>"true"}
          LCI
        %input{:type => "radio", :id=>"type_me", :name => "type_radio", :value => "me", :onClick => 'lci_or_me()'}
          ME
    #xi.prop_row
      .label
        &xi;
      .custom-field
        [
        %input.xi_input{:type => "text", :id=>"xi1", :value => "1", :valid_if => "x == 0 || x == 1"}
        ,
        %input.xi_input{:type => "text", :id=>"xi2", :value => "0", :valid_if => "x == 0 || x == 1"}
        ,
        %input.xi_input{:type => "text", :id=>"xi3", :value => "0", :valid_if => "x == 0 || x == 1"}
        ,
        %input.xi_input{:type => "text", :id=>"xi4", :value => "0", :valid_if => "x == 0 || x == 1"}
        %span.only_3D
          ,
        %input.xi_input.only_3D{:type => "text", :id=>"xi5", :value => "0", :valid_if => "x == 0 || x == 1"}
        %span.only_3D
          ,
        %input.xi_input.only_3D{:type => "text", :id=>"xi6", :value => "0", :valid_if => "x == 0 || x == 1"}
        ]
    .prop_row
      .label
        N<sub>avg</sub>
      .field
        %input{:type => "text", :id => "Navg", :value=>"50"}
        
    
  #integrator_params.group
    .group_title
      Integrator parameters
    .prop_row
      .label
        &epsilon;
      .field
        %input{:type => "text", :id=>"epsilon", :value=>"10e-10"}
    .prop_row
      .label
        T<sub>max</sub>
      .field
        %input{:type => "text", :id=>"Tmax", :value=>"1000"}
        
  #kezdofeltetelek.group
    .group_title
      Initial condition
    %table#initial_conditions
      %tr
        %th
          &nbsp;
        %th
          start
        %th
          end
        %th
          N
        %th
          &Delta;
        %th
          map
      %tr
        %td
          e<sub>1</sub>
        %td
          %input{:type => "text", :id=>"e1_start", :value=>"0", :valid_if => "0 <= x && x < 1"}
        %td
          %input{:type => "text", :id=>"e1_end", :valid_if => "0 <= x && x < 1"}
        %td
          %input{:type => "text", :id=>"e1_n"}
        %td
          %input{:type => "text", :id=>"e1_d"}
        %td
          %input{:type => "checkbox", :id =>"e1_map"}
      
      %tr
        %td
          &omega;<sub>1</sub>
        %td
          %input{:type => "text", :id=>"w1_start", :value=>"0", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"w1_end", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"w1_n"}
        %td
          %input{:type => "text", :id=>"w1_d"}
        %td
          %input{:type => "checkbox", :id =>"w1_map"}

      %tr
        %td{:style => "border-bottom: solid 1px lightgrey"}
          M<sub>1</sub>
        %td
          %input{:type => "text", :id=>"M1_start", :value=>"0", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"M1_end", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"M1_n"}
        %td
          %input{:type => "text", :id=>"M1_d"}
        %td
          %input{:type => "checkbox", :id =>"M1_map"}
      %tr
        %td
          a
        %td
          %input{:type => "text", :id=>"a_start", :valid_if => "isDefined(x) && x > 0"}
        %td
          %input{:type => "text", :id=>"a_end", :valid_if => "x > 0"}
        %td
          %input{:type => "text", :id=>"a_n"}
        %td
          %input{:type => "text", :id=>"a_d"}
        %td
          %input{:type => "checkbox", :id =>"a_map"}  

      %tr
        %td
          e
        %td
          %input{:type => "text", :id=>"e_start", :value=>"0", :valid_if => "0 <= x && x < 1"}
        %td
          %input{:type => "text", :id=>"e_end", :valid_if => "0 <= x && x < 1"}
        %td
          %input{:type => "text", :id=>"e_n"}
        %td
          %input{:type => "text", :id=>"e_d"}
        %td
          %input{:type => "checkbox", :id =>"e_map"}  

      %tr.only_3D
        %td
          i
        %td
          %input{:type => "text", :id=>"i_start", :value=>"0", :valid_if =>  "0 <= x && x < 180"}
        %td
          %input{:type => "text", :id=>"i_end", :valid_if =>  "0 <= x && x < 180"}
        %td
          %input{:type => "text", :id=>"i_n"}
        %td
          %input{:type => "text", :id=>"i_d"}
        %td
          %input{:type => "checkbox", :id =>"i_map"}

      %tr
        %td
          &omega;
        %td
          %input{:type => "text", :id=>"w_start", :value=>"0", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"w_end", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"w_n"}
        %td
          %input{:type => "text", :id=>"w_d"}
        %td
          %input{:type => "checkbox", :id =>"w_map"}

      %tr.only_3D
        %td
          &Omega;
        %td
          %input{:type => "text", :id=>"O_start", :value=>"0", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"O_end", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"O_n"}
        %td
          %input{:type => "text", :id=>"O_d"}
        %td
          %input{:type => "checkbox", :id =>"O_map"}  

      %tr
        %td
          M
        %td
          %input{:type => "text", :id=>"M_start", :value=>"0", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"M_end", :valid_if =>  "0 <= x && x < 360"}
        %td
          %input{:type => "text", :id=>"M_n"}
        %td
          %input{:type => "text", :id=>"M_d"}
        %td
          %input{:type => "checkbox", :id =>"M_map"}
          
    #ic_errors.error_box
          
  #integrator_params.group
    .group_title
      Output options
    .prop_row
      .label
        indicator
      .field
        %input{:type => "checkbox", :id=>"indicator"}
    .prop_row
      .label
        file prefix
      .field
        %input{:type => "text", :id=>"file_prefix", :value => "output"}
          
  %br
        
      
:javascript  

  var job_max = 1000;
  var job_opt = 100;
  
  function mu_calc(){
    try{
      var m0 = parseFloat($F('m0'));
      var m1 = parseFloat($F('m1'));
      if(m0 || m1){
        var mu = m1 / (m0 + m1);
        $('mu').value = (isNaN(mu)? "" : mu);
      }
      validate($('mu'));
    }
    catch(err){
      $('mu').value = ""
    }
  }
  
  function resetMs(){
    $('m0').value = $('m1').value = "";
  }
  
  function two_or_three_dim(){
    var cond = $('dimension_2d').checked;
    if(cond){
      $('partial_form').select('.only_3D').invoke('fade');
    }
    else{
      $('partial_form').select('.only_3D').invoke('appear');
    }
  }
  
  function lci_or_me(){
    var cond = $('type_lci').checked;
    if(cond){
      $('xi').appear();
    }
    else{
      $('xi').fade();
    }
  }

  function initial_condtition_change(event){
    
    if(!/(\w|\d|\u0008|\u002e)/.test(whichKey(event))){
      return;
    }
    var id = event.element().id;
    var id_arr = id.split("_");
    var prefix = id_arr[0];
    var field = id_arr[1];

  
    var start = $(prefix + "_start").value;
    var end = $(prefix + "_end").value;
    var n = $(prefix + "_n").value;
    var d = $(prefix + "_d").value;
    if(isNumber(start) && isNumber(end)){   
      if(field == 'n'){
        $(prefix + "_d").value = toOrdinaryDecimal((end - start)/n);
      }
      else if(isNumber(d)){
        $(prefix + "_n").value = toOrdinaryDecimal((end - start)/d);
      }
    }
    else{
      if(field == 'start' || field == 'end'){
        $(prefix + "_n").value = "";
        $(prefix + "_d").value = "";
      }
    }
    validate($(prefix + "_n"));
    validateInitialConditions();
    return;
  }
  
  function clArg(clName, inputName){
    if(inputName == null){
      inputName = clName;
    }
    var result = "";
    var value = $(inputName).value;
    if(value){
      result += " -" + clName + " " + value;
    }
    return result;
  }

  function buildInitalCondComp(cid){
    var result = {};
    var start = $(cid + "_start").value;
    var end = $(cid + "_end").value;
    var n = $(cid + "_n").value;
    var d = $(cid + "_d").value;
    
    result.map = $(cid + "_map").checked;
        
    if(end){
      if(d){
        result.d = d;
        if(!result.map){
          result.seq = {name: cid, start: start, end: end, diff: d, type: 'start_end_diff'};
          result.cl = "$(" + result.seq.name + ")";
        }
      } 
      result.end = end;
    }
    
    if(!result.cl){
      result.cl = start;
    }

    return result;
  }
 
 
  function buildCommandArgs(){
    var res = "";
    var iterators = [];
    var sequences = [];//iterators are resolved in the r3bp program, sequences are resolved outside of it (in the portal or on the node)
    var is_3D = radio_value('dimension_radio') == '3D';
    res += clArg('mu');
    res += clArg('Navg');
    res += clArg('eps', 'epsilon')
    res += clArg('Tmax');
    res += " -" + radio_value('centre_radio');
    if($('CO').checked){
      res += " -CO";
    }
  
    if(radio_value('type_radio') == 'lci'){
      var xiArray = [];
      for(var i = 1; i <= 6; i++){
        xiArray.push($('xi' + i).value);
      }    
      res += " -xi " + "[" + xiArray.join(',') + "]"
    }
  
  
    try{
      var ic_full = $w("e1 w1 M1 a e i w O M");
      var ic = ic_full.clone();
      icVal = {}
      if(!is_3D){
        ic = ic.without('i', 'O');
      }
      ic.each(function(e, idx){
        comp = buildInitalCondComp(e);
        icVal[e] = comp.cl;
        if(comp.map){
          iterators.push(comp);
        }
        else{
          if(comp.seq){
            sequences.push(comp.seq);
          }
        }
        comp.idx = idx + 1;
      });
    
      res += " -P1[1," + [icVal['e1'], icVal['w1'], icVal['M1']].join(',') + "]"
  
      var p2Array = $w("a e i w O M");
      if(!is_3D){
        p2Array = p2Array.without('i', 'O');
      }
  
      res += " -P2[" + p2Array.map(function(s){
        return icVal[s];
      }).join(',') + "]"; 
    }
    catch(error){
      //TODO
    }
    var file_name = $('file_prefix').value
    sequences.each(function(e){
      file_name = file_name + "_" + e.name + "_$(fixed 64 " + e.name + ")";
    });
    file_name += ".out";
    if(iterators.length > 0){
      res += " -grid " + iterators.map(function(e){
        return e.idx + "[" + [e.end, e.d].join(',') + "]"
      }).join(',');
      
      if($('indicator').checked){
        res += " -oGI " + file_name; 
      }
      else{
        res += " -oG " + file_name;
      }
    }
    else{
      res += " -oI " + file_name;
    }
    return {command_args: res, sequences: sequences};
  }
  
  function prepareSubmit(){
    var valid= validatePage();
    var command_struct = buildCommandArgs();
    $('command_args').value = command_struct.command_args;
    $('sequences').value = $A(command_struct.sequences).toJSON();
    $('display_str').value = $('file_prefix').value;
  }
  
  $('partial_form').init = function (){
    two_or_three_dim();
    lci_or_me();
    validatePage();
    addDynamic();
  }
  
  function showValidity(element, valid){
    if(!valid){
      element.addClassName("invalid");
    }
    else{
      element.removeClassName("invalid");
    }    
  }
  
  function validate(element){
    var exp = element.readAttribute('valid_if');
    if(exp){
      x = element.value;
      var valid = true;
      try{
        valid = eval(exp) || x === '';
      }
      catch(e){
        valid = false;
      }
      showValidity(element,  valid);
    }
  }
  
  function numberOfMaps(){
    var noMaps = $('initial_conditions').select('input[type="checkbox"]').inject(0, function(acc, e){
      if(e.id.endsWith("_map") && e.checked){
        return acc + 1;
      }
      else{
        return acc;
      }
    });
    return noMaps;
  }
  
  function sumOfNs(){
    var sum = 0;
    $('initial_conditions').select('input').each(function (e){
      if(e.id.endsWith("_n")){
        var val = e.value;
        if(isNumber(val)){
          sum += Number(val);
        }
      }
    });
    return sum;
  }
  

  
  function validateInitialConditions(){
    
    var error_box = $('ic_errors');
    var valid = true;
    var errors = [];
    
    var noMaps = numberOfMaps();
    if(noMaps > 2){
      errors.push("Only 2 initial conditions should be mapped.");
    }
    
    if(sumOfNs() >= Math.pow(10, 10)){
      errors.push("The sum of Ns should be smaller than 10<sup>10</sup>.")
    }
    
    error_box.update(errors.join("<br/>"));
    showValidity(error_box, errors.length == 0);    
  }
  
  function validatePage(){
    var messages = [];
    var result = true; 
    $('partial_form').select('input').each(function(e){
      result = validate(e) && result;
    });
    result = validateInitialConditions() && result;
    return result;
  }
  
  function addDynamic(){
    $('partial_form').select('input').each(function(e){
      var exp = e.readAttribute('valid_if');
      if(exp){
        helpNode = Builder.node(
           'div', {id:(e.id + "_help") ,'className': 'dyn_help'}, []).update(translate4human(exp));
        e.parentNode.appendChild(helpNode);
        helpNode.hide();
        e.observe('mouseover', function(){
          //Effect.Queues.get('helpOver').invoke('cancel');
          //Effect.Appear($(e.id + '_help'), {queue: {position: 'end', scope: 'helpOver'}});
          $(e.id + '_help').show();
        });
      
        e.observe('mouseout', function(){
          //Effect.Fade(e.id + '_help');
          $(e.id + '_help').hide();
        });
      }    
    
      e.observe('change', function(){
        validate(e);
      })
    });
    $('initial_conditions').select('input').each(function(i){
      i.observe('keyup', initial_condtition_change);
    });
    $('initial_conditions').select('input[type="checkbox"]').each(function(e){
      e.observe('click', function(){
        validateInitialConditions();
      });
    });
    //
    //setting of the missing name attributes 
    //
    $('partial_form').getElements().each(function (e){
      if(e.type != 'radio'){
        e.name = e.id;
      }
    });
  }
