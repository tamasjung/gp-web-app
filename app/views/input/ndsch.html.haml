-#
  EMBEDDED_STYLE
    #help_button{
      float: right
      margin-top: 50px
    }
    .add_image{
      width: 24px;
      height: 24px;
      clear: right;
    }
    .add_text{
      font-size: 1em;
    }
    
    .prop_row .field a.add_body{
      padding-left: 3px;
      padding-right: 3px;
      margin-left: 3px;
      margin-right: 3px;
      
      text-decoration: none;
      color: grey;
    }
    
    table a.remove_body{
      font-size: 1em;
      color: inherit;
      text-decoration: none;
    }
    
    table a.remove_body:hover{
      color: lightgrey;
      
    }
    
    #bodies table td, #bodies table th{
      margin-bottom: 2px;
      color: grey;
      
    }
    
    #bodies table tbody tr td input{
      min-width: 40px; 
      width: 40px;
      font-size: inherit;
    }
    
    th.tlabel{
      border-right: solid 1px lightgrey;
      margin-right: 50px;
      min-width: 80px;
      width: 80px;
      max-width: 80px;
      padding: 2px;
      
    }
    
    tr td.first_cell, tr th.first_cell{
      //background: yellow;
      padding-left: 20px; 
    }
    
    tr td:first{
      border: solid;
    }
    
    
    .repeater{
      margin-top: 10px;
      border-top: solid lightgray 1px
    }
    .repeater * {
      margin-top: 10px;
      font-size: 0.8em;
      height: 0.9em;
      padding-left: 5px;
      padding-right: 5px;
    }
    
  
  EMBEDDED_STYLE

%form#partial_form.panel_in_tab
  %input{:type => "hidden", :id=>"command_args"}
  %input{:type => "hidden", :id=>"display_str"}

  %a.clickable.help#help_button{:onClick => "$$('.long_desc').invoke('toggle');"}
      
  #model_params.group
    .group_title
      Mesh
    .prop_row
      .label
        x size
      .field
        %input{:type => "text", :id=>"nx", :valid_if => "divisibleBy4(x)"}
    .prop_row
      .label
        y size
      .field
        %input{:type => "text", :id=>"ny", :valid_if => "divisibleBy4(x)"}
    .prop_row
      .label
        z size
      .field
        %input{:type => "text", :id=>"nz", :valid_if => "divisibleBy4(x)"}
          
    .prop_row
      .label
        distance
      .field
        %input{:type => "text", :id=>"hr", :valid_if => "isNumber(x)"}  
      .long_desc
        Discretization in coordinate space (distance of mesh points). The same value is used in all
        three directions.
              
    .prop_row
      .label
        maximum iterations
      .field
        %input{:type => "text", :id=>"maxim", :valid_if => "isNumber(x)"}  
      .long_desc
        Maximum number of imaginary timestep iterations.
      
    .prop_row
      .label
        number of states
      .field
        %input{:type => "text", :id=>"morb", :valid_if => "isNumber(x)"}  
      .long_desc
        Number of states that are propagated. This number may be larger than the number of states calculated to improve convergence.

    .prop_row
      .label
        order
      .field
        %input{:type => "text", :id=>"order", :valid_if => "isNumber(x)"}  
      .long_desc
        Order of the finite-difference approximation of the Laplacian.
        
    .prop_row
      .label
        multiplicator
      .field
        %input{:type => "text", :id=>"rmul", :valid_if => "isNumber(x)", :value=>"0.5"}  
      .long_desc
        Multiplicator of timestep ramp.
        
    .prop_row
      .label
        convergence factor(estp)
      .field
        %input{:type => "text", :id=>"estp", :valid_if => "isNumber(x)"}  
      .long_desc
        Convergence factor of the imaginary timestep iterations. This is the value at which the
        iterations start.
        
    .prop_row
      .label
        convergence factor(este)
      .field
        %input{:type => "text", :id=>"este", :valid_if => "isNumber(x)"}  
      .long_desc
        Convergence factor of the imaginary timestep iterations. This is the smallest value that is
        used during the iterations. Setting ESTE = 0 will decrease the time step until the accuracy
        limit determined by EPSR has been reached.
        
    .prop_row
      .label
        converged errors 
      .field
        %input{:type => "checkbox", :id=>"imsg_0"}
      .long_desc
        Show errors and timings after each converged time step.
        
    .prop_row
      .label
        imaginary errors
      .field
        %input{:type => "checkbox", :id=>"imsg_1"}
      .long_desc
        Show errors and timing after each imaginary timestep iteration.
        
    .prop_row
      .label
        timings
      .field
        %input{:type => "checkbox", :id=>"imsg_2"}
      .long_desc
        Show timings.
      
    .prop_row
      .label
        dump
      .field
        %input{:type => "checkbox", :id=>"imsg_3"}
      .long_desc
        Dump eigenvalues and wave functions into a binary data file. 
        Depending on the grid, this may generate a huge file. 
        Meant for testing, documentation, and further processing. 
        The file name is configured in prefix.model.
        
    .prop_row
      .label
        many
      .field
        %input{:type => "text", :id=>"many", :valid_if => "isNumber(x)"}  
      .long_desc
        If this is specified, then the “any-order”
        algorithm with order = 2 × MANY is selected.
        
    .prop_row
      .label
        epsi
      .field
        %input{:type => "text", :id=>"epsi", :valid_if => "isNumber(x)"}  
      .long_desc
        Desired limit for the variance of the overlap energies during the iterations at fixed time step


    .prop_row
      .label
        epsr
      .field
        %input{:type => "text", :id=>"many", :valid_if => "isNumber(x)"}  
      .long_desc
        Desired accuracy for the variance of the energy as a function of time step.

  #model_params.group
    .group_title
      Model
    .prop_row
      .label
        h/2m
      .field
        %input{:type => "text", :id=>"nx", :valid_if => "divisibleBy4(x)"}
      .long_desc
        Value of h/2m. Can be used to set the unit system to atomic Rydberg or Hartree units, but also to 2m
        use an effective mass.

    .prop_row
      .label
        norb
      .field
        %input{:type => "text", :id=>"nx", :valid_if => "divisibleBy4(x)"}
      .long_desc
        Number of states that are converged to the desired accuracy.

  #model_params.group
    .group_title
      Potential
      %ul#potential_tabs.group_title_tabs
        %li.tab
          %a{:href => '#bodies_panel' }
            bodies
        %li.tab
          %a{:href => '#file_panel' }
            file upload
        %li.tab
          %a{:href => '#reference_panel'}
            file reference
    #bodies_panel.tabpanel
      .prop_row
        .label
          default value
        .field
          %input{:type => "text", :id=>"default", :valid_if => "isNumber(x)"}
        
      .prop_row
        .label
          .add_text
            add
        .field
          %a.action_link.add_body{:onClick => "addSphere();"}
            sphere
          %a.action_link.add_body{:onClick => "addBody('cuboid');"}
            cuboid
          %a.action_link.add_body{:onClick => "addBody('cylinder');"}
            cylinder
          %a.action_link.add_body{:onClick => "addBody('half_space');"}
            half-space
          %a.action_link.add_body{:onClick => "addBody('atom');"}
            atom
    
      .prop_row
        .label
          upload
        .field
          %a.action_link.add_body{:onClick => "addUploadedAtoms();"}
            atoms


        
    #bodies
    .prop_row.hidden_prototype 
      %table#sphere_prototype
        %tr
          %th{:rowspan => '2', :class => 'tlabel'}
            sphere
          %th.first_cell       
            %span<
              x
            %sub<>
              0
          %th
            %span<
              y
            %sub<>
              0 
          %th
            %span<
              z
            %sub<>
              0
          %th
            r
          %th
            V
          %th
        
        
        %tr 
          %td.first_cell
            %input{:type => 'text', :id => 'sphere_x0_prototype', :value => '0'}
          %td
            %input{:type => 'text', :id => 'sphere_y0_prototype', :value => '0'}
          %td
            %input{:type => 'text', :id => 'sphere_z0_prototype', :value => '0'}
          %td
            %input{:type => 'text', :id => 'sphere_r_prototype', :value => '1'}
          %td
            %input{:type => 'text', :id => 'sphere_v_prototype', :value => '0'}
          %td
            %a.remove_body{:onClick => "removeBody(event);"}
              \-
    
     
      %table#atom_prototype
        %tr
          %th{:rowspan => '2', :class => 'tlabel'}
            atom
          %th.first_cell       
            %span<
              x
            %sub<>
              0
          %th
            %span<
              y
            %sub<>
              0 
          %th
            %span<
              z
            %sub<>
              0
          %th
            type
          %th


        %tr 
          %td.first_cell
            %input{:type => 'text', :id => 'atom_x0_prototype', :value => '0'}
          %td
            %input{:type => 'text', :id => 'atom_y0_prototype', :value => '0'}
          %td
            %input{:type => 'text', :id => 'atom_z0_prototype', :value => '0'}
          %td
            %select{:id => 'atom_select_prototype'}
          %td
            %a.remove_body{:onClick => "removeBody(event);"}
              \-

      %table#cuboid_prototype
        %tr
          %th.tlabel{:rowspan => '4'}
            rectangular cuboid

          %th.first_cell       
            %span<
              x
            %sub<>
              0
          %th
            %span<
              y
            %sub<>
              0 
          %th
            %span<
              z
            %sub<>
              0
          %th
            width
          %th
            height
          %th
            depth
          %th
    
        %tr 
          %td.first_cell
            %input{:type => 'text', :id => 'cuboid_x_prototype'}
          %td
            %input{:type => 'text', :id => 'cuboid_y_prototype'}
          %td
            %input{:type => 'text', :id => 'cuboid_z_prototype'}
          %td
            %input{:type => 'text', :id => 'cuboid_width_prototype'}
          %td
            %input{:type => 'text', :id => 'cuboid_height_prototype'}
          %td
            %input{:type => 'text', :id => 'cuboid_depth_prototype'}
          %td
            %a.remove_body{:onClick => "removeBody(event);"}
              \-
        %tr
          %th.first_cell
            &phi;<sub>1</sub>
          %th
            &phi;<sub>2</sub>
          %th
            V
        %tr
          %td.first_cell
            %input{:type => 'text', id => 'cuboid_angle1_prototype'}
          %td
            %input{:type => 'text', id => 'cuboid_angle1_prototype'}
          %td
            %input{:type => 'text', id => 'cuboid_v_prototype'}
            
            
            
      %table#cylinder_prototype
        %tr
          %th.tlabel{:rowspan => '3'}
            cylinder

          %th.first_cell       
            %span<
              x
            %sub<>
              0
          %th
            %span<
              y
            %sub<>
              0 
          %th
            %span<
              z
            %sub<>
              0
          
          %th
            &phi;<sub>1</sub>
          %th
            &phi;<sub>2</sub>
          %th
            V
          %th

        %tr 
          %td.first_cell
            %input{:type => 'text', :id => 'cylinder_x_prototype'}
          %td
            %input{:type => 'text', :id => 'cylinder_y_prototype'}
          %td
            %input{:type => 'text', :id => 'cylinder_z_prototype'}
          %td
            %input{:type => 'text', :id => 'cylinder_phi1_prototype'}
          %td
            %input{:type => 'text', :id => 'cylinder_phi2_prototype'}
          %td
            %input{:type => 'text', :id => 'cylinder_v_prototype'}
          %td
            %a.remove_body{:onClick => "removeBody(event);"}
              \-
      
      %table#half_space_prototype
        %tr
          %th.tlabel{:rowspan => '3'}
            half-space

          %th.first_cell       
            %span<
              x
            %sub<>
              0
          %th
            %span<
              y
            %sub<>
              0 
          %th
            %span<
              z
            %sub<>
              0
          %th       
            %span<
              n
            %sub<>
              x
          %th
            %span<
              n
            %sub<>
              y 
          %th
            %span<
              n
            %sub<>
              z              
          %th
            V
          %th

        %tr 
          %td.first_cell
            %input{:type => 'text', :id => 'half_space_x_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_y_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_z_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_nx_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_ny_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_nz_prototype'}
          %td
            %input{:type => 'text', :id => 'half_space_v_prototype'}
          %td
            %a.remove_body{:onClick => "removeBody(event);"}
              \-        
    #file_panel.tabpanel
      .prop_row
        .label
          file
        .field
          %input{:type => 'file', :id => 'potencial_file'}
        .long_desc
          Only if < 5 MB 
    #reference_panel.tabpanel
      .prop_row
        .label
          file reference
        .field
          %input{:type => "text", :id => 'potential_reference'} 
        .long_desc
          For large files (> 5 MBs) an URL can be given
              
              
  %br 
  %x3d#renderer{:height => "650px", :showstat => "false", :width => "650px", :x => "0px", :y => "0px"}
    %scene
      %background{:def => "bgnd", :skycolor => "1 1 1", :transparency => "1.0"}
      %viewpoint{:orientation => "-0.69017 0.723467 -0.0161809 0.735134", :position => "4.88104 4.59865 7.4181"}
      %group#root
      
:javascript 

  var ATOMS = [
    {id: ' O', label: "oxigen", gauss: [[1,2],[3,4],[5,6]]},
    {id: ' C', label: "coal", gauss: [[7,8],[9,10],[11,12]]}    
  ];
  
  function generateAtomOptions(){
    ATOMS.sortBy(function(e){
      return e.label;
    }).each(function (e){
      $('atom_select_prototype').appendChild(NodeBuilder(['option', {value: e.id}, e.label]));
    })
  }

  function centerCoords(prefix, index){
    return pointCoords(prefix, "0", index);
  }
  
  function pointCoords(prefix, postfix, index){
    return $w('x y z').map(function(axisName){
      return (+$(prefix + "_" + axisName + postfix + "_" + index).value);
    });    
  }

  function addSphere(){
    var editorId = addBody('sphere');
    $(editorId).createX3D = function(){
      createX3DSphere(editorId);
    }
    $(editorId).createX3D();
  }
  
  function createX3DSphere(editorId){
    transformAttrs = {};
    
    var index = getIndex(editorId);
    var r = $("sphere_r_" + index).value;
    var v = $("sphere_v_" + index).value;
    
    createX3DNode(editorId, 'sphere', transformAttrs, {radius: r});
  }
  
  function createX3DNode(editorId, bodyType, transformAttrs, bodyAttrs){
    
    transformAttrs.id = "tr_" + editorId;
    
    var index = getIndex(transformAttrs.id);
    
    var vector = $w('x y z').map(function(axis){
      return (+$('repeater_' + axis + '_' + index).value);
    });
    
    var n = $('repeater_n_' + index).value;
    
    var translation = centerCoords(bodyType, index);
 
    for(var i = 0; i < n; i++){
      var trAttrs = Object.clone(transformAttrs);
      trAttrs.translation = translation.join(" ");
      trAttrs.id += "_" + i; 
      renderer.addX3DNode(bodyType, trAttrs, bodyAttrs);
      translation = translation.map(function(i, index){
        return i + vector[index];
      });
    };
  }
  
  
  function createX3DBody(editorId){
    
  }
  
  function rebuildScene(){
    var rootParent = $('root').parentNode;
    $('root').remove();
    rootParent.appendChild(NodeBuilder(
      ['group', {id: 'root'}]
    ));
    $('bodies').select('table').each(function(e){
      e.createX3D();
    })    
  }
  
  function addCuboid(){
    
  }

  var renderer = {
    
    diffuseColor: "0.41 0.39 0.03",
    specularColor: "0.94 0.72 0",
    
    addX3DNode: function(bodyType, transformAttrs, bodyAttrs){
      $('root').appendChild(
        NodeBuilder(
        ['group', {},
          ['transform', transformAttrs,
            ['shape', {},
              ['appearance', {},
                ['material', {diffuseColor:this.diffuseColor , specularColor: this.specularColor, shininess: '0.12', transparency: "0.4"}]
              ],
              [bodyType, bodyAttrs]
            ]
          ]
        ])
      );
    }
  };

  function reindexing_bodies(){  
     var trs = [];
     $('bodies').select("table").each(function (e){
       trs.push(e);
     });
     $A(trs).each(reindexing);
   }

  function addBody(prototype_id){
    var clone = $(prototype_id + "_prototype").cloneNode(true);
    //clone.setStyle("display: none;");
    //Element.extend(clone);
    reindexing(clone, 1000001);
    $('bodies').appendChild(clone);
    reindexing_bodies();
    Effect.Appear(clone.id, { duration: 0.5 });
    //$('bodies').appendChild(new Element('hr'));
    $(clone.id).down('tbody').appendChild(addRepeater(clone.id));
    $(clone.id).select('input').each(function(e){
      e.observe('change', rebuildScene);
    });
    return clone.id;
  }
  
  function addRepeater(id){
    var index = getIndex(id);
    var tr = NodeBuilder(
      ['tr', {},
        ['td', {colspan: 100}, 
          ['div', {class: 'repeater'}, 
            ['span', {onclick: "Effect.toggle(event.element().next())"}, 'repeat'],
            ['span', {id: 'repeater_container_' + index}, 
              ['input', {id: 'repeater_n_' + index, type: 'text', value: '1'}],
              ['span', {}, ' time(s) '],
          
              ['span', {}, 'by ['],
              ['input', {id: 'repeater_x_' + index, type: 'text', value: '0'}],
              ['span', {}, ','],
              ['input', {id: 'repeater_y_' + index, type: 'text', value: '0'}],
              ['span', {}, ','],
              ['input', {id: 'repeater_z_' + index, type: 'text', value: '0'}],
              ['span', {}, ']']
            ]
          ]
        ]
      ]
      );
    
    return tr;
  }
  
  function removeBody(event){
    var element = Event.element(event).parentNode.parentNode.parentNode.parentNode;
    Effect.Fade(element.id, {
      duration: 0.5, 
      afterFinish: function(){
        element.remove();
        reindexing_bodies();
        rebuildScene();
      }});
  }
  
  function buildCommandArgs(){
    return "";
  }

  function prepareSubmit(){
  
    $('command_args').value = buildCommandArgs();
  
    $('display_str').value = $('command_args').value;
  }
  
  $('partial_form').preInit = function(){
    generateAtomOptions();
  }

  $('partial_form').init = function (){
    $$('.hidden_prototype').invoke('hide');
    //$$('.long_desc').invoke('hide');
    $$('input').each(function (e){
      var ph = e.readAttribute('valid_if');
      if(ph){
        e.writeAttribute('placeholder', translate4human(ph));
      }
    });
    new Control.Tabs('potential_tabs');
  }
  
