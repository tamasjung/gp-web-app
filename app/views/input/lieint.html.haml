-#
  EMBEDDED_STYLE
       
    #orbitals input{
      width: 5em;
    }
    
    #plus_orbital {
      color: red;
      
      float: left;
      background: green;
    }
    
    #sequences{
      //font-size: 0.8em;
    }
    #sequences input{
      height: 1.1em;
    }
    #partial_form  hr{
      margin-bottom: 0em;
    }
    
    #seqlabel{
      font-size: 0.85em;
    }
  
  EMBEDDED_STYLE

%form#partial_form.panel_in_tab

        
  .group
    .group_title
      Orbitals
      
    .prop_row
      .label
        gravitational constant
      .field
        %input{:type => "text", :id=>"gravitational_constant"}      
    .prop_row
      .label
        central mass
      .field
        %input{:type => "text", :id=>"central_mass"}


    %br
    %a.clickable.add{:onclick => "new_orbital()"}
      
        
    %table
      %tbody#orbitals
        %tr
          %th
            a
          %th
            l
          %th
            e
          %th
            w
          %th
            i
          %th
            o
          %th
            mass 
          %th
            &nbsp;
        %tr#prototype4orbitals
          %td
            %input{:type => "text", :id => "orbital_a_prototype"}
          %td
            %input{:type => "text", :id => "orbital_l_prototype"}
          %td
            %input{:type => "text", :id => "orbital_e_prototype"}
          %td
            %input{:type => "text", :id => "orbital_w_prototype"}
          %td
            %input{:type => "text", :id => "orbital_i_prototype"}
          %td
            %input{:type => "text", :id => "orbital_o_prototype"}
          %td
            %input{:type => "text", :id => "orbital_mass_prototype"} 
          %td
            %a.clickable.minus{:onclick => "remove_orbital(event)"}
            
    %hr
    .label#seqlabel
      
    %table
      %tbody#sequences
        %tr
          %th
            
          %th
            start
          %th
            max
          %th
            step
        %tr#prototype4sequences
          %th.sequence_name
            
          %td
            %input{:type => "hidden", :id => "sequence_name_prototype"}
            %input{:type => "text", :id => "sequence_start_prototype"}
          %td
            %input{:type => "text", :id => "sequence_max_prototype"}
          %td
            %input{:type => "text", :id => "sequence_step_prototype"}
          
      
              
          
  .group
    .group_title
      Output
        
    .prop_row
      .label
        write final 
      .field
        %input{:type => "checkbox", :id=>"final"}
        
    .prop_row
      .label
        format
      .field
        %input{:type => "text", :id=>"format"}
       

  .group
    .group_title
      Integration parameters
    .prop_row
      .label
        precision
      .field
        %input{:type => "text", :id=>"precision"}

    .prop_row
      .label
        order
      .field
        %input{:type => "text", :id=>"order"}
        
    .prop_row
      .label
        delta
      .field
        %input{:type => "text", :id=>"delta"}

    .prop_row
      .label
        time
      .field
        %input{:type => "text", :id=>"time"}
        
  .group
    .group_title
      Analysis methods
      
      
    .prop_row
      .label
        normal 
      .field
        %input{:type => "checkbox", :id=>"normal"}

    .prop_row
      .label
        Lyapunov 
      .field
        %input{:type => "checkbox", :id=>"lci"}

    .prop_row
      .label
        relative Lyapunov
      .field
        %input{:type => "checkbox", :id=>"rli"}

    .prop_row
      .label
        thrid-order differential Lyapunov 
      .field
        %input{:type => "checkbox", :id=>"lli"}

    .prop_row
      .label
        differential maximum eccentricity 
      .field
        %input{:type => "checkbox", :id=>"dmx"}
      
    .prop_row
      .label
        differential separation
      .field
        %input{:type => "text", :id=>"difference"}
        
  %br

      
:javascript


  function directFlag(name){
    if($(name).checked){
      return " --" + name
    }
    else{
      return "";
    }
  } 
  
  function directValue(name){
    var element = $(name);
    if(!element){
      
    }
    else{
      var val = $(name).value;
      if(val){
        return " --" + name + " " + val;
      }
      else{
        return "";
      }
    }
  }
  
  function new_by_prototype(prototypeName, idPrefix, parentId){
    
    var clone = $(prototypeName).cloneNode(true);
    
    clone.writeAttribute('id', idPrefix + '_tmp');
    
    reindexing(clone, "tmp2");
    
    clone.setStyle("display: none");
    
    $(parentId).appendChild(clone);
    
    reindexing_selected_children(parentId, "tr[id^='" + idPrefix + "_']");
    
    Effect.Appear(clone.id, { duration: 0.5 });
    
    nameFromId($('partial_form'));  
    
    return clone;  
  }
   
  var orbital_prefix = 'orbital_';
  
  function new_orbital(){
    
    var clone = new_by_prototype('prototype4orbitals', 'orbital', 'orbitals');
    
    clone.select("input").each(function(e){
      e.observe('change', function(event){
        var val = event.element().value;
        if(val && val.match(/^\$\w+$/)){
          generateSequence(val);
        }
        removeUnusedSequences();
      })
    });    
  }
  
  function showSequencesStatus(shown){
    $('seqlabel').update((shown ? "" : "no ") + 'sequences');
    if(shown){
      $('sequences').parentNode.show();
    }
    else{
      $('sequences').parentNode.hide();
    }
  }
  
  function generateSequence(sequenceName){
    var seq_row = new_by_prototype('prototype4sequences', 'sequence', 'sequences');
    seq_row.select(".sequence_name").each(function(e){
      var name = sequenceName.slice(1);
      e.update(name);
      seq_row.down("input[type='hidden']").value = name;
    });
    showSequencesStatus(true);
  }
  
  function removeUnusedSequences(){
    var seqs = [];
    $('orbitals').select('input').each(function(e){
      if(e.value.startsWith("$")){
        seqs.push(e.value.slice(1));
      }
    });
    $('sequences').childElements().each(function(e){
      var nameElement = e.down(".sequence_name");
      if(nameElement && e.id != 'prototype4sequences' ){
        if(!seqs.include(nameElement.innerHTML)){
          Effect.Fade(e.id, {
            duration: 0.5, 
            afterFinish: function(){
              e.remove();
              reindexing_selected_children('sequences', "tr[id^='orbital_']");  
              if($('sequences').childElements().size() < 3){
                showSequencesStatus(false);
              }
            }});
        }
      }
    });
  }
  
  function remove_orbital(event){
    if(Event.element(event).up('tbody').childElements().size() > 3){
      var element = Event.element(event).up('tr');
      Effect.Fade(element.id, {
        duration: 0.5, 
        afterFinish: function(){
          element.remove();
          reindexing_orbitals();
          removeUnusedSequences();
        }});
    } 
  }
  
  function reindexing_orbitals(){
    reindexing_selected_children('orbitals', "tr[id^='orbital_']");
  }
  
  function buildCommandArgs(){
    var cmdArgs = "-i input.dat";
    
    var flags = $w('final normal lci rli lli dmx');
    
    cmdArgs = flags.inject(cmdArgs, function(res, item){ return res + directFlag(item)});
    
    var simpleValues = $w('gravitational_constant format precision order delta time difference');
    
    cmdArgs = simpleValues.inject(cmdArgs, function(res, item){ return res + directValue(item)});
    
    return cmdArgs
    
  }
  
  function numberOfOrbitals(json){
    var index = 0;
    while(json['orbital_a_' + index] !== undefined){
      index++;
    }
    return index;
  }
  
  function prepareSubmit(){
    var sequences = []
    $('sequences').select("tr[id^='sequence_']").each(function (tr){
      var index = getIndex(tr.id)
      sequences.push({
        name: tr.down(".sequence_name").innerHTML,
        start: $F('sequence_start_' + index),
        max: $F('sequence_max_' + index),
        diff: $F('sequence_step_' + index)
      })
    })
    var content = ""
    $('orbitals').select("tr[id^='orbital_']").each(function (tr){
      var index = getIndex(tr.id)
      values = $w('a l e w i o mass').map(function (attr){
        return $F('orbital_' + attr + "_" + index)
      });
      content += values.join(' ');
      content += '\n';
    })
    
    var launch_params = {
      files: [{name: 'input.dat', content: content}],
      sequences: sequences,
      command_args: buildCommandArgs(),
      display_str: 'Lie integrator $id'
    }
    return launch_params;
  }
  
  $('partial_form').preInit = function(settings){
    $('prototype4orbitals').hide();
    $('prototype4sequences').hide();
    showSequencesStatus(false);
    new_orbital();
    
    var orbitalsCount = numberOfOrbitals(settings.form_data);
    while(orbitalsCount-- > 1){
      new_orbital();
    }
    if(settings.launch_params.sequences){
      settings.launch_params.sequences.each(function(i, idx){
        generateSequence("$" + i.name);
      })
    }
    
    reindexing_orbitals();
  }
   
  $('partial_form').init = function (){

  }

  //
  //debug
  //

  $('partial_form').select('input').each(function(e){
   e.observe('change', function(){
     debug(buildCommandArgs());
     //validate(e);
   })
  });

