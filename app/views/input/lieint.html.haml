-#
  EMBEDDED_STYLE
       
    #orbitals input{
      width: 5em;
    }
    
    #plus_orbital {
      color: red;
      
      float: left;
      background: green;
    }
  
  EMBEDDED_STYLE

%form#partial_form.panel_in_tab
  %input{:type => "hidden", :id=>"command_args"}
  %input{:type => "hidden", :id=>"display_str"}

        
  #model_params.group
    .group_title
      Orbitals
      
    .prop_row
      .label
        gravitational constant
      .field
        %input{:type => "text", :id=>"gravitational_constant"}      
    .prop_row
      .label
        central mass
      .field
        %input{:type => "text", :id=>"central_mass"}


    %br
    %a.clickable.add{:onclick => "new_orbital()"}
      
        
    %table
      %tbody#orbitals
        %tr
          %th
            a
          %th
            l
          %th
            e
          %th
            w
          %th
            i
          %th
            o
          %th
            mass 
          %th
            &nbsp;
        %tr#orbital_0
          %td
            %input{:type => "text", :id => "orbital_a_0"}
          %td
            %input{:type => "text", :id => "orbital_l_0"}
          %td
            %input{:type => "text", :id => "orbital_e_0"}
          %td
            %input{:type => "text", :id => "orbital_w_0"}
          %td
            %input{:type => "text", :id => "orbital_i_0"}
          %td
            %input{:type => "text", :id => "orbital_o_0"}
          %td
            %input{:type => "text", :id => "orbital_mass_0"} 
          %td
            %a.clickable.minus{:onclick => "remove_orbital(event)"}
              
          
  #model_params.group
    .group_title
      Output
        
    .prop_row
      .label
        write final 
      .field
        %input{:type => "checkbox", :id=>"final"}
        
    .prop_row
      .label
        format
      .field
        %input{:type => "text", :id=>"format"}
       

  #model_params.group
    .group_title
      Integration parameters
    .prop_row
      .label
        precision
      .field
        %input{:type => "text", :id=>"precision"}

    .prop_row
      .label
        order
      .field
        %input{:type => "text", :id=>"order"}
        
    .prop_row
      .label
        delta
      .field
        %input{:type => "text", :id=>"delta"}

    .prop_row
      .label
        time
      .field
        %input{:type => "text", :id=>"time"}
        
  #model_params.group
    .group_title
      Analysis methods
      
      
    .prop_row
      .label
        normal 
      .field
        %input{:type => "checkbox", :id=>"normal"}

    .prop_row
      .label
        Lyapunov 
      .field
        %input{:type => "checkbox", :id=>"lci"}

    .prop_row
      .label
        relative Lyapunov
      .field
        %input{:type => "checkbox", :id=>"rli"}

    .prop_row
      .label
        thrid-order differential Lyapunov 
      .field
        %input{:type => "checkbox", :id=>"lli"}

    .prop_row
      .label
        differential maximum eccentricity 
      .field
        %input{:type => "checkbox", :id=>"dmx"}
      
    .prop_row
      .label
        differential separation
      .field
        %input{:type => "text", :id=>"difference"}
        
  %br

      
    :javascript
    
      function directFlag(name){
        if($(name).checked){
          return " --" + name
        }
        else{
          return "";
        }
      } 
      
      function directValue(name){
        var element = $(name);
        if(!element){
          
        }
        else{
          var val = $(name).value;
          if(val){
            return " --" + name + " " + val;
          }
          else{
            return "";
          }
        }
      }
      
      
       
      var orbital_prefix = 'orbital_';
      function new_orbital(){
        
        var clone = $('orbital_0').cloneNode(true);
        
        clone.setStyle("display: none");
        
        $('orbitals').appendChild(clone);
        
        re_indexing_orbitals();
        Effect.Appear(clone.id, { duration: 0.5 });
      }
      
      function remove_orbital(event){
        if(Event.element(event).parentNode.parentNode.parentNode.childElements().size() > 2){
          var element = Event.element(event).parentNode.parentNode;
          Effect.Fade(element.id, {
            duration: 0.5, 
            afterFinish: function(){
              element.remove();
              re_indexing_orbitals();
            }});
        }
      }
      
      function re_indexing_orbitals(){
        var i = 0;
        var trs = [];
        $('orbitals').select("tr[id^='orbital_']").each(function (e){
          trs.push(e);
        });
        $A(trs).each(function (e){
          e.select("input").each(function(element){
            element.writeAttribute("id", element.readAttribute("id").replace(/\d+$/, i));
          });
          e.writeAttribute("id", orbital_prefix + i);
          i++;
        });
      }
      
      function buildCommandArgs(){
        var cmdArgs = "";
        
        var flags = $A(['final', 'normal', 'lci', 'rli', 'lli', 'dmx']);
        
        cmdArgs = flags.inject(cmdArgs, function(res, item){ return res + directFlag(item)});
        
        var simpleValues = ['gravitational_constant', 'format', 'precision', 'order', 'delta', 'time', 'difference'];
        
        cmdArgs = simpleValues.inject(cmdArgs, function(res, item){ return res + directValue(item)});
        
        return cmdArgs
        
      }
      
      
   
:javascript
   $('partial_form').init = function (){
     
   }

   //
   //debug
   //

   $('partial').select('input').each(function(e){
     e.observe('change', function(){
       debug(buildCommandArgs());
       //validate(e);
     })
   });

