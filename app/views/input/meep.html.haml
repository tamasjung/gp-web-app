-#
  EMBEDDED_STYLE

    .vector3 input, #objects table input{
      max-width: 7em;
      //background: yellow;
    }
    
    th.tlabel{
      border-right: solid 1px lightgrey;
      margin-right: 50px;
      min-width: 80px;
      width: 80px;
      max-width: 80px;
      padding: 2px;
    }
    
    tr td.first_cell, tr th.first_cell{
      //background: yellow;
      padding-left: 20px; 
    }
    
    .parameter_row{
      clear: both;
      display: table-row;
    }
    
    .parameter_row .label{
      margin-right: 15px;
      color: grey;
      text-align: right;
      width: 230px;
    }
    
    .parameter_row .value{
      width: 300px;
    }
    
    #parameters.group .parameter_row a.minus{
      float: right;
      height: 1em;
      padding: 3px;
      margin-left: 5px;
      margin-top: 1px;
      margin-bottom: 1px;
    }
    
    .source_editor{
      background: #f0f0f0;
      //color: ligthgrey;
      width: 625px;
      height: 200px;
    }
    
    .sub2panel a.minus{
      margin-left: 12px;
      margin-bottom: 6px;
    }
    
    a.clickable{
      margin-left: 12px;
    }
    
    .not_alone{
      display: none;
    }
  
  EMBEDDED_STYLE



%form#partial_form.panel_in_tab
  %input{:type => "hidden", :id=>"command_args"}
  %input{:type => "hidden", :id=>"display_str"}
  
  .group    
    %a.clickable.edit{:onClick => "toggleEditor('editor_0')", :title => 'click to see or hide the editor'}
    .long_desc
      The following text will be insert at the begining of the scheme file.
    
    %textarea.source_editor{:id => 'editor_0'}
      
  #parameters.group
    .group_title
      Parameters
    %a.clickable.add{:onclick => "new_parameter()"}
    .long_desc
      Simple name-value pairs can be given as parameters. You can use the names below in place of direct values.
    #parameters
     
  #computational_cell.group 
    .group_title
      Computational cell
    .prop_row
      .label
        latice size
      .field.vector3
        %input{:type => "text", :id => "latice_size_x", :value => "1"}
        %input{:type => "text", :id => "latice_size_y", :value => "1"}
        %input{:type => "text", :id => "latice_size_z", :value => "1"}
      
    .prop_row
      .label
        resolution
      .field
        %input{:type => "text", :id=>"resolution", :valid_if => ""}
        
    .prop_row
      .label
        k-point
      .field.vector3
        %input{:type => "text", :id=>"k_point_x"}
        %input{:type => "text", :id=>"k_point_y"}
        %input{:type => "text", :id=>"k_point_z"}

  #pml.group 
    .group_title
      Boundary conditions
    %a.clickable.add{:onclick => "new_pml()"}
    .hidden_prototype
      #pml_prototype.sub2panel
        .prop_row
          .label
            thickness
          .field
            %input{:type=>"text", :id=>"pml_thickness_prototype"}
      
        .prop_row
          .label
            direction
          .field
            %select{:id=>"pml_direction_prototype"}
              %option{:value=>"ALL", :selected=>"true"}
                all
              %option{:value=>"X"}
                x
              %option{:value=>"Y"}
                y
              %option{:value=>"Z"}
                z
        .prop_row
          .label
            side
          .field
            %select{:id=>"pml_direction_prototype"}
              %option{:value=>"ALL", :selected=>"true"}
                all
              %option{:value=>"Low"}
                low
              %option{:value=>"High"}
                high
        .prop_row
          .label
            strength
          .field
            %input{:type=>"text", :id=>"strength_prototype", :value=>"1"}
      
        .prop_row
          .label
            R-asymptotic
          .field
            %input{:type=>"text", :id=>"r_asymptotic_prototype", :value=>"1e-15"}
      
        .prop_row
          .label
            pml-profile
          .field
            %input{:type=>"text", :id=>"pml_profile_prototype"}
        %a.minus.clickable{:onClick => "removePml(event);"}
    #pmls  
        
  #computational_cell.group 
    .group_title
      Symmetry
    .prop_row
      .label
        add
      .field
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'mirror-sym');"}
          mirror
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'rotate2-sym');"}
          180&deg; rotational
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'rotate4-sym');"}
          90&deg; rotational
        
    %table
      %tbody#symmetry_container
        %tr#aaa.not_alone
          %th
            type
          %th
            direction
          %th
            phase
          %th
          
  .group
    .group_title
      Materials
    .prop_row
      .label
        add 
      .field
        %a.action_link.button_like{:onclick => "new_material()"}
          medium
        
    %table
      %tbody#material_container
        %tr.not_alone
          %th
            name
          %th
            epsilon
            
  .group
    .group_title
      Geometry
    .prop_row
      .label
        add
      .field
        -%w"sphere cylinder cone block ellipsoid".each do |item|
          %a.action_link.button_like{:onClick => "new_object(event, '#{item}');"}
            =item
    #objects
    .prop_row.hidden_prototype 
      #sphere_prototype.sub2panel
        .sub2panel_title
          sphere
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'sphere_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'sphere_x0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'sphere_y0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'sphere_z0_prototype', :value => '0'}
          
        .prop_row
          .label
            r
          .field
            %input{:type => 'text', :id => 'sphere_r_prototype', :value => '1'}

        
        %a.minus.clickable{:onClick => "removeObject(event);"}


      #cylinder_prototype.sub2panel
        .sub2panel_title
          cylinder
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'cylinder_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'cylinder_x0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_y0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_z0_prototype', :value => '0'}
        .prop_row
          .label
            r
          .field
            %input{:type => 'text', :id => 'cylinder_r_prototype', :value => '1'}
            
        .prop_row
          .label
            height
          .field
            %input{:type => 'text', :id => 'cylinder_height_prototype', :value => '2'}
        
        .prop_row
          .label
            axis
          .field.vector3
            %input{:type => 'text', :id => 'cylinder_axis_x_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_axis_y_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_axis_z_prototype', :value => '0'}

        %a.minus.clickable{:onClick => "removeObject(event);"}
              
      #cone_prototype.sub2panel
        .sub2panel_title
          cone
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'cone_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'cone_x0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_y0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_z0_prototype', :value => '0'}
        .prop_row
          .label
            r
          .field
            %input{:type => 'text', :id => 'cone_r_prototype', :value => '1'}
        .prop_row
          .label
            height
          .field
            %input{:type => 'text', :id => 'cone_height_prototype', :value => '2'}
        .prop_row
          .label
            axis
          .field.vector3
            %input{:type => 'text', :id => 'cone_axis_x_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_axis_y_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_axis_z_prototype', :value => '0'}
        .prop_row
          .label
            r2
          .field
            %input{:type => 'text', :id => 'cone_r_2_prototype', :value => '0'}
          
        %a.minus.clickable{:onClick => "removeObject(event);"}        

              
      #block_prototype.sub2panel
        .sub2panel_title
          block
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'block_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'block_x0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'block_y0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'block_z0_prototype', :value => '0'}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => 'text', :id => 'block_size_1_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_size_2_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_size_3_prototype', :value => '1'}
        .prop_row
          .label
            %span<
              edge
            %sub<>
              1
          .field.vector3
            %input{:type => 'text', :id => 'block_edge_1_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_1_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_1_z_prototype', :value => '1'}
            
        .prop_row
          .label
            %span<
              edge
            %sub<>
              2
          .field.vector3
            %input{:type => 'text', :id => 'block_edge_2_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_2_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_2_z_prototype', :value => '1'}


        .prop_row
          .label
            %span<
              edge
            %sub<>
              3
          .field.vector3
            %input{:type => 'text', :id => 'block_edge_3_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_3_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_edge_3_z_prototype', :value => '1'}
            
        %a.minus.clickable{:onClick => "removeObject(event);"}      
              
      #ellipsoid_prototype.sub2panel
        .sub2panel_title
          ellipsoid
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'ellipsoid_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_x0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'ellipsoid_y0_prototype', :value => '0'}
            %input{:type => 'text', :id => 'ellipsoid_z0_prototype', :value => '0'}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_size_1_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_size_2_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_size_3_prototype', :value => '1'}
        .prop_row
          .label
            %span<
              edge
            %sub<>
              1
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_edge_1_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_1_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_1_z_prototype', :value => '1'}

        .prop_row
          .label
            %span<
              edge
            %sub<>
              2
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_edge_2_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_2_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_2_z_prototype', :value => '1'}


        .prop_row
          .label
            %span<
              edge
            %sub<>
              3
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_edge_3_x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_3_y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_edge_3_z_prototype', :value => '1'}

        %a.minus.clickable{:onClick => "removeObject(event);"}              

          
  
  .group
    .group_title
      Source
    .prop_row
      %a.clickable.add{:onclick => "new_source()"}   
            
    .hidden_prototype
      #source_panel_prototype.sub2panel
        .prop_row
          .label
            source type
          .field
            %input{:type => "radio", :name => "source_subclass_prototype", :value => 'continuous', :id => "source_subclass_continuous_prototype", :checked => "true"}
              continuous
            %input{:type => "radio", :name => "source_subclass_prototype", :value => 'gaussian', :id => "source_subclass_gaussian_prototype"}
              gaussian
            %input{:type => "radio", :name => "source_subclass_prototype",:value => 'custom'  ,:id => "source_subclass_custom_prototype"}
              custom
        .source_fields
          .prop_row.continuous.gaussian
            .label
              frequency
            .field
              %input{:type => "text", :id => "source_frequency_prototype"}
          .prop_row.continuous.gaussian.custom
            .label
              start-time
            .field
              %input{:type => "text", :id => "source_start_time_prototype"}
          .prop_row.continuous.custom
            .label
              end-time
            .field
              %input{:type => "text", :id => "source_end_time_prototype"}
          .prop_row.continuous.gaussian
            .label
              width
            .field
              %input{:type => "text", :id => "source_width_prototype"}
          .prop_row.continuous.gaussian
            .label
              cutoff
            .field
              %input{:type => "text", :id => "source_start_time_prototype"}
          .prop_row.custom
            .label
              src-function
            .field
              %input{:type => "text", :id => "source_src_function_prototype"}      
        .prop_row
          .label
            component
          .field
            %input{:type => "text", :id => "source_component_prototype"}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => "text", :id => "source_center_x_prototype"}
            %input{:type => "text", :id => "source_center_y_prototype"}
            %input{:type => "text", :id => "source_center_z_prototype"}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => "text", :id => "source_size_x_prototype"}
            %input{:type => "text", :id => "source_size_y_prototype"}
            %input{:type => "text", :id => "source_size_z_prototype"}
        .prop_row
          .label
            amplitude
          .field
            %input{:type => "text", :id => "source_amplitude_prototype"}
        .prop_row
          .label
            amplitude function
          .field
            %input{:type => "text", :id => "source_amp_func_prototype"}

        %a.minus.clickable{:onClick => "removeSource(event);"}      
        
    #sources

  .group
    .group_title
      Flux region
    .prop_row
      .label
        center
      .field.vector3
        %input{:type => "text", :id => "flux_center_x_prototype"}
        %input{:type => "text", :id => "flux_center_y_prototype"}
        %input{:type => "text", :id => "flux_center_z_prototype"}
    .prop_row
      .label
        size
      .field.vector3
        %input{:type => "text", :id => "flux_size_x_prototype"}
        %input{:type => "text", :id => "flux_size_y_prototype"}
        %input{:type => "text", :id => "flux_size_z_prototype"}
    .prop_row
      .label
        direction
      .field
        %input{:type => "text", :id => "flux_direction_prototype"}
    .prop_row
      .label
        weight
      .field
        %input{:type => "text", :id => "flux_weight_prototype"}
    .prop_row
      .label
        frequency center
      .field
        %input{:type => "text", :id => "flux_fcen_prototype"}
        
    .prop_row
      .label
        frequency width
      .field
        %input{:type => "text", :id => "flux_df_prototype"}
            
    .prop_row
      .label
        number of frequencies
      .field
        %input{:type => "text", :id => "flux_nfreq_prototype"}        
    
  .group
    .group_title
      Running parameters
    .prop_row
      .label
        run until
      .field
        %input{:type => "text", :id => "run_until"}
    .prop_row
      .label
        run sources
      .field
        %input{:type => "text", :id => "run_sources"}
    .prop_row
      .label
        additional
      .field
        %input{:type => "text", :id => "run_additional"}
    .prop_row
      .label
        output epsilon
      .field
        %input{:type => "checkbox", :id => "run_output_epsilon"}

       

  %br 
  


      
:javascript 
  
  function toggleEditor(id){
    var options = {queue: 'end', duration: 0.3}
    var toggle = true
    if($(id).visible()){
      if($(id).value != ''){
        confirm_dialog('confirm', 'The content will also be deleted', function(){
          $(id).value = '';
          $(id).blindUp(options)
        });
      }
      else{
        $(id).blindUp(options)
      }
    }
    else{
      $(id).blindDown({queue: 'end', duration: 0.3})
    }
  }
  
  function new_parameter(){
    var index = $('parameters').childElements().size()
    $('parameters').appendChild(
      
      NodeBuilder(
        ["div", {class: 'parameter_row', id: 'parameter_' + index},
          ["input", {type: "text" , class: 'label', id: "parameter_name_" + index}],
          ["input", {type: "text", class: 'value', id: "parameter_value_" + index}],
          ["a", {class: 'clickable minus', onclick: "remove_parameter(event)"}]
        ]
      )
    )
  }
  
  function remove_parameter(event){
    var container = event.element().up('#parameters')
    event.element().up('div').remove();
    reindexing_selected_children(container, "div[id^='parameter_']")
  }

  function new_pml(event){
    var prototype_id = 'pml';
    var clone = $(prototype_id + "_prototype").cloneNode(true);
    
    reindexing(clone, 1000001);
    $('pmls').appendChild(clone);
    reindexing(clone);
    Effect.Appear(clone.id, { duration: 0.5 });
    return clone.id;    
  }
  
  function removePml(event){
    var container = event.element().up('#pmls')
    event.element().up('.sub2panel').remove();
    reindexing_selected_children(container, "div")
  }
  
  

  function new_symmetry(event, sym_type){
    var index = $('symmetry_container').childElements().size() - 1
    $('symmetry_container').appendChild(
      NodeBuilder(
        ["tr", {id: 'sym_' + index},
          ["td", {},
            ["input", {type: 'hidden', id: 'sym_type_' + index, value: sym_type}],
            event.element().firstChild.nodeValue
          ],
          ["td", {},
            ['input', {type: 'text', id: 'sym_direction_' + index}]
          ],
          ["td", {},
            ['input', {type: 'text', id: 'sym_phase_' + index}]
          ],
          ["td", {}, 
            ['a', { class: 'minus clickable', onClick: "removeRow(event, 'sym');"}]
          ]
        ]
      )
    ).previous().removeClassName('not_alone')
  }
  
  function new_material(){
    var index = $('material_container').childElements().size() - 1
    $('material_container').appendChild(
      NodeBuilder(
        ["tr", {id: 'material_' + index},
          ["td", {},
            ["input", {type: 'text', id: 'medium_name_' + index}]
          ],
          ["td", {},
            ['input', {type: 'text', id: 'medium_epsilon_' + index}]
          ],
          ["td", {}, 
            ['a', { class: 'minus clickable', onClick: "removeRow(event, 'medium');"}]
          ]
        ]
      )
    ).previous().removeClassName('not_alone')    
  }
  
  

  function removeRow(event, prefix){
    var container = event.element().up('tbody')
    event.element().up('tr').remove();
    reindexing_selected_children(container, "tr[id^='" + prefix + "_']")
    if(container.childElements().size() == 1){
      container.firstDescendant().addClassName('not_alone')
    }
  }
  
  function new_object(event, object_type){
    var prototype_id = object_type;
    var clone = $(prototype_id + "_prototype").cloneNode(true);
    
    reindexing(clone, 1000001);
    $('objects').appendChild(clone);
    //reindexing_bodies();
    Effect.Appear(clone.id, { duration: 0.5 });
    return clone.id;
  }
  
  function removeObject(event){
    var container = event.element().up('#objects')
    event.element().up('.sub2panel').remove();
    reindexing_selected_children(container, "div")
  }
  
  function checkSourceSubclasses(container_id){
    var index = getIndex(container_id)
    var subclass = radio_value('source_subclass_' + index) 
    if(!subclass){
      subclass = 'continuous'
      $('source_subclass_continuous_' + index).checked = true
    }
    $(container_id).select(".source_fields .prop_row").each(function(e){
      if(e.hasClassName(subclass)){
        if(!e.visible()){
          e.show()
        }
      }
      else{
        if(e.visible()){
          e.hide()
        }
      }
    }) 
  }
  
  function new_source(){
    var prototype_id = 'source_panel';
    var clone = $(prototype_id + "_prototype").cloneNode(true);
    var index = $('sources').select('.sub2panel').size()
    reindexing(clone, 1000001);
    $('sources').appendChild(clone);
    reindexing(clone, index);
    Effect.Appear(clone.id, { duration: 0.5 });
    
    
    checkSourceSubclasses(clone.id)

    
    $(clone.id).select('input[type="radio"]').each(function(e){
      e.observe('change', function(event){
        checkSourceSubclasses(event.element().up('.sub2panel').id)
      });
    });
    return clone.id;
  }  

  function removeSource(event){
    var container = event.element().up('#sources')
    event.element().up('.sub2panel').remove();
    reindexing_selected_children(container, "div")
  }

  function file_upload(result){
    //alert(result);
    if(result !== ''){
      //
    }
  }


  function buildCommandArgs(){
    return "meep f g";
  }
  
  
  function addAccordionDynamism(){
    $$(".group .group_title").each(function(e){
      e.observe("click", function(event){
      event.element().siblings().each(function(item){
        item.toggle()
      })
    })
    })
    
  }


  function prepareSubmit(){
  
    $('command_args').value = buildCommandArgs();
    $('display_str').value = $('command_args').value
  }
  
  $('partial_form').preInit = function(settings){
    
  }

  $('partial_form').init = function (){
    $$('.hidden_prototype').invoke('hide');
    //$$('.long_desc').invoke('hide');
    $$('input').each(function (e){
      var ph = e.readAttribute('valid_if');
      if(ph){
        e.writeAttribute('placeholder', translate4human(ph));
      }
    });
    
    $$('.long_desc, .source_editor').invoke('toggle');
    
    
    addAccordionDynamism();
  }
  

