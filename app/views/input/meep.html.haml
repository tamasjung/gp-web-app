-#
  EMBEDDED_STYLE

    .vector3 input, #objects table input{
      max-width: 7em;
      //background: yellow;
    }
    
    th.tlabel{
      border-right: solid 1px lightgrey;
      margin-right: 50px;
      min-width: 80px;
      width: 80px;
      max-width: 80px;
      padding: 2px;
    }
    
    tr td.first_cell, tr th.first_cell{
      //background: yellow;
      padding-left: 20px; 
    }
    
    .parameter_row{
      clear: both;
      display: table-row;
    }
    
    .parameter_row .label{
      margin-right: 15px;
      color: grey;
      text-align: right;
      width: 230px;
    }
    
    .parameter_row .value{
      width: 300px;
    }
    
    #parameters.group .parameter_row a.minus{
      float: right;
      height: 1em;
      padding: 3px;
      margin-left: 5px;
      margin-top: 1px;
      margin-bottom: 1px;
    }
    
    .source_editor{
      background: #f0f0f0;
      //color: ligthgrey;
      width: 625px;
      height: 200px;
    }
    
    .sub2panel a.minus{
      margin-left: 12px;
      margin-bottom: 6px;
    }
    
    a.clickable{
      margin-left: 12px;
    }
    
    .not_alone{
      display: none;
    }
    
    
    .group_title .clickable{
      width: 15px;
      height: 15px;
      padding-top: 0px;
      float: right;
    }
    
    pre{
      font-weight: bold;
      background: url('/images/grey79.png') repeat scroll 0 0;
      -moz-border-radius: 5px 
    }
  
  EMBEDDED_STYLE



%form#partial_form.panel_in_tab
  %input{:type => "hidden", :id=>"command_args"}
  %input{:type => "hidden", :id=>"display_str"}
  
  .group    
    %a.clickable.edit{:onClick => "toggleEditor('editor_head')", :title => 'click to see or hide the editor'}
    .long_desc
      The following text will be inserted at the begining of the Scheme file.
    
    %textarea.source_editor{:id => 'editor_head'}
      
  #parameters.group
    .group_title
      Parameters
      %a.play.clickable
    .long_desc
      Simple name-value pairs can be given as parameters. You can use the names below in place of direct values.
    %a.clickable.add{:onclick => "new_parameter()"}  
    #parameter_container
    
    
     
  #computational_cell.group 
    .group_title
      Computational cell
      %a.play.clickable
    .prop_row
      .label
        latice size
      .field.vector3
        %input{:type => "text", :id => "latice_size_x", :value => "1"}
        %input{:type => "text", :id => "latice_size_y", :value => "1"}
        %input{:type => "text", :id => "latice_size_z", :value => "1"}
      
    .prop_row
      .label
        resolution
      .field
        %input{:type => "text", :id=>"resolution", :valid_if => ""}
        
    .prop_row
      .label
        k-point
      .field.vector3
        %input{:type => "text", :id=>"k_point_x"}
        %input{:type => "text", :id=>"k_point_y"}
        %input{:type => "text", :id=>"k_point_z"}

  #pml.group 
    .group_title
      Boundary conditions
      %a.play.clickable
    .hidden_prototype
      #pml_prototype.sub2panel
        .prop_row
          .label
            thickness
          .field
            %input{:type=>"text", :id=>"pml_thickness_prototype"}
      
        .prop_row
          .label
            direction
          .field
            %select{:id=>"pml_direction_prototype"}
              %option{:value=>"ALL", :selected=>"true"}
                all
              %option{:value=>"X"}
                x
              %option{:value=>"Y"}
                y
              %option{:value=>"Z"}
                z
        .prop_row
          .label
            side
          .field
            %select{:id=>"pml_side_prototype"}
              %option{:value=>"ALL", :selected=>"true"}
                all
              %option{:value=>"Low"}
                low
              %option{:value=>"High"}
                high
        .prop_row
          .label
            strength
          .field
            %input{:type=>"text", :id=>"strength_prototype", :value=>"1"}
      
        .prop_row
          .label
            R-asymptotic
          .field
            %input{:type=>"text", :id=>"r_asymptotic_prototype", :value=>"1e-15"}
      
        .prop_row
          .label
            pml-profile
          .field
            %input{:type=>"text", :id=>"pml_profile_prototype"}
        %a.minus.clickable{:onClick => "removeSub2panel(event);"}
    #pml_container 
    %a.clickable.add{:onclick => "newSub2panel('pml')"} 
        
  #symmetry.group 
    .group_title
      Symmetry
      %a.play.clickable
    .prop_row
      .label
        add
      .field
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'mirror-sym');"}
          mirror
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'rotate2-sym');"}
          180&deg; rotational
        %a.action_link.button_like{:onClick => "new_symmetry(event, 'rotate4-sym');"}
          90&deg; rotational
        
    %table
      %tbody#symmetry_container
        %tr.not_alone
          %th
            type
          %th
            direction
          %th
            phase
          %th
          
  #materials.group
    .group_title
      Materials
      %a.play.clickable
    .prop_row
      .label
        add 
      .field
        %a.action_link.button_like{:onclick => "new_material()"}
          medium
        
    %table
      %tbody#material_container
        %tr.not_alone
          %th
            name
          %th
            epsilon
            
  #geometry.group
    .group_title
      Geometry
      %a.play.clickable
    .prop_row
      .label
        add
      .field
        -%w"sphere cylinder cone block ellipsoid".each do |item|
          %a.action_link.button_like{:onClick => "new_object(event, '#{item}');"}
            =item
    #objects
    .prop_row.hidden_prototype 
      #sphere_prototype.sub2panel
        .sub2panel_title
          sphere
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'sphere_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'sphere_centerx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'sphere_centery_prototype', :value => '0'}
            %input{:type => 'text', :id => 'sphere_centerz_prototype', :value => '0'}
          
        .prop_row
          .label
            radius
          .field
            %input{:type => 'text', :id => 'sphere_radius_prototype', :value => '1'}

        
        %a.minus.clickable{:onClick => "removeSub2panel(event);"}


      #cylinder_prototype.sub2panel
        .sub2panel_title
          cylinder
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'cylinder_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'cylinder_centerx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_centery_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_centerz_prototype', :value => '0'}
        .prop_row
          .label
            radius
          .field
            %input{:type => 'text', :id => 'cylinder_radius_prototype', :value => '1'}
            
        .prop_row
          .label
            height
          .field
            %input{:type => 'text', :id => 'cylinder_height_prototype', :value => '2'}
        
        .prop_row
          .label
            axis
          .field.vector3
            %input{:type => 'text', :id => 'cylinder_axisx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_axisy_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cylinder_axisz_prototype', :value => '0'}

        %a.minus.clickable{:onClick => "removeSub2panel(event);"}
              
      #cone_prototype.sub2panel
        .sub2panel_title
          cone
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'cone_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'cone_centerx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_centery_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_centerz_prototype', :value => '0'}
        .prop_row
          .label
            radius
          .field
            %input{:type => 'text', :id => 'cone_radius_prototype', :value => '1'}
        .prop_row
          .label
            height
          .field
            %input{:type => 'text', :id => 'cone_height_prototype', :value => '2'}
        .prop_row
          .label
            axis
          .field.vector3
            %input{:type => 'text', :id => 'cone_axisx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_axisy_prototype', :value => '0'}
            %input{:type => 'text', :id => 'cone_axisz_prototype', :value => '0'}
        .prop_row
          .label
            radius2
          .field
            %input{:type => 'text', :id => 'cone_radius2_prototype', :value => '0'}
          
        %a.minus.clickable{:onClick => "removeSub2panel(event);"}        

              
      #block_prototype.sub2panel
        .sub2panel_title
          block
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'block_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'block_centerx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'block_centery_prototype', :value => '0'}
            %input{:type => 'text', :id => 'block_centerz_prototype', :value => '0'}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => 'text', :id => 'block_sizex_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_sizey_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_sizez_prototype', :value => '1'}
        .prop_row
          .label
            %span<
              axis
            %sub<>
              1
          .field.vector3
            %input{:type => 'text', :id => 'block_axis1x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis1y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis1z_prototype', :value => '1'}
            
        .prop_row
          .label
            %span<
              axis
            %sub<>
              2
          .field.vector3
            %input{:type => 'text', :id => 'block_axis2x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis2y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis2z_prototype', :value => '1'}


        .prop_row
          .label
            %span<
              axis
            %sub<>
              3
          .field.vector3
            %input{:type => 'text', :id => 'block_axis3x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis3y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'block_axis3z_prototype', :value => '1'}
            
        %a.minus.clickable{:onClick => "removeSub2panel(event);"}      
              
      #ellipsoid_prototype.sub2panel
        .sub2panel_title
          ellipsoid
        .prop_row
          .label
            material
          .field
            %input{:type => 'text', :id => 'ellipsoid_material_prototype'}
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_centerx_prototype', :value => '0'}
            %input{:type => 'text', :id => 'ellipsoid_centery_prototype', :value => '0'}
            %input{:type => 'text', :id => 'ellipsoid_centerz_prototype', :value => '0'}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_sizex_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_sizey_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_sizez_prototype', :value => '1'}
        .prop_row
          .label
            %span<
              axis
            %sub<>
              1
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_axis1x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis1y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis1z_prototype', :value => '1'}

        .prop_row
          .label
            %span<
              axis
            %sub<>
              2
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_axis2x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis2y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis2z_prototype', :value => '1'}


        .prop_row
          .label
            %span<
              axis
            %sub<>
              3
          .field.vector3
            %input{:type => 'text', :id => 'ellipsoid_axis3x_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis3y_prototype', :value => '1'}
            %input{:type => 'text', :id => 'ellipsoid_axis3z_prototype', :value => '1'}

        %a.minus.clickable{:onClick => "removeSub2panel(event);"}              

          
  
  #source.group
    .group_title
      Source
      %a.play.clickable      
    .hidden_prototype
      #source_prototype.sub2panel
        .prop_row
          .label
            source type
          .field
            %input{:type => "radio", :name => "source_type_prototype", :value => 'continuous', :id => "source_type_continuous_prototype", :checked => "true"}
              continuous
            %input{:type => "radio", :name => "source_type_prototype", :value => 'gaussian', :id => "source_type_gaussian_prototype"}
              gaussian
            %input{:type => "radio", :name => "source_type_prototype",:value => 'custom'  ,:id => "source_type_custom_prototype"}
              custom
        .source_fields
          .prop_row.continuous.gaussian
            .label
              frequency
            .field
              %input{:type => "text", :id => "source_frequency_prototype"}
          .prop_row.continuous.gaussian.custom
            .label
              start-time
            .field
              %input{:type => "text", :id => "source_start_time_prototype"}
          .prop_row.continuous.custom
            .label
              end-time
            .field
              %input{:type => "text", :id => "source_end_time_prototype"}
          .prop_row.continuous.gaussian
            .label
              width
            .field
              %input{:type => "text", :id => "source_width_prototype"}
          .prop_row.continuous.gaussian
            .label
              cutoff
            .field
              %input{:type => "text", :id => "source_cutoff_prototype"}
          .prop_row.custom
            .label
              src-function
            .field
              %input{:type => "text", :id => "source_src_function_prototype"}
        .others      
          .prop_row
            .label
              component
            .field
              %input{:type => "text", :id => "source_component_prototype"}
          .prop_row
            .label
              center
            .field.vector3
              %input{:type => "text", :id => "source_centerx_prototype"}
              %input{:type => "text", :id => "source_centery_prototype"}
              %input{:type => "text", :id => "source_centerz_prototype"}
          .prop_row
            .label
              size
            .field.vector3
              %input{:type => "text", :id => "source_sizex_prototype"}
              %input{:type => "text", :id => "source_sizey_prototype"}
              %input{:type => "text", :id => "source_sizez_prototype"}
          .prop_row
            .label
              amplitude
            .field
              %input{:type => "text", :id => "source_amplitude_prototype"}
          .prop_row
            .label{:name => 'amp-func'}
              amplitude function
            .field
              %input{:type => "text", :id => "source_amp_func_prototype"}

        %a.minus.clickable{:onClick => "removeSub2panel(event);"}      
        
    #source_container
    .prop_row
      %a.clickable.add{:onclick => "newSource('source')"}   


  #flux.group
    .group_title
      Flux region
      %a.play.clickable
    .hidden_prototype
      #flux_prototype.sub2panel
        .prop_row
          .label
            center
          .field.vector3
            %input{:type => "text", :id => "flux_centerx_prototype"}
            %input{:type => "text", :id => "flux_centery_prototype"}
            %input{:type => "text", :id => "flux_centerz_prototype"}
        .prop_row
          .label
            size
          .field.vector3
            %input{:type => "text", :id => "flux_sizex_prototype"}
            %input{:type => "text", :id => "flux_sizey_prototype"}
            %input{:type => "text", :id => "flux_sizez_prototype"}
        .prop_row
          .label
            direction
          .field
            %input{:type => "text", :id => "flux_direction_prototype"}
        .prop_row
          .label
            weight
          .field
            %input{:type => "text", :id => "flux_weight_prototype"}
        .prop_row
          .label
            frequency center
          .field
            %input{:type => "text", :id => "flux_fcen_prototype"}
        
        .prop_row
          .label
            frequency width
          .field
            %input{:type => "text", :id => "flux_df_prototype"}
            
        .prop_row
          .label
            number of frequencies
          .field
            %input{:type => "text", :id => "flux_nfreq_prototype"}   
        %a.minus.clickable{:onClick => "removeSub2panel(event);"}      
    
    #flux_container
    %a.clickable.add{:onclick => "newSub2panel('flux')"} 
    
    
  #run.group
    .group_title
      Running parameters
      %a.play.clickable
    .prop_row
      .label
        run type
      .field
        %input{:type => "radio", :name => "run_type", :value => 'until', :id => "run_type_until", :checked => "true"}
          until
        %input{:type => "radio", :name => "run_type", :value => 'sources', :id => "run_type_sources"}
          sources
   
    .prop_row
      .label
        cond?/time
      .field
        %input{:type => "text", :id => "run_cond"}
    .prop_row
      .label
        step functions
      .field
        %input{:type => "text", :id => "run_step_function"}
    .prop_row
      .label
        output epsilon
      .field
        %input{:type => "checkbox", :id => "run_output_epsilon"}

       
  .group    
    %a.clickable.edit{:onClick => "toggleEditor('editor_tail')", :title => 'click to see or hide the editor'}
    .long_desc
      The following text will be inserted at the end of the Scheme file.

    %textarea.source_editor{:id => 'editor_tail'}
  %br 
  


      
:javascript
  Object.extend(String.prototype, {
    nl: function(){
      if(this != ''){
        return this + "\n"
      }
      else{
        return this
      }
    },
    prefix: function(prefix){
      if(this != ''){
        return prefix + this
      }
      else{
        return this
      }
    }
  })
 
  function lisp(){
    var args = $A(arguments);
    var result = "(";
    result += args.reject(function(s){return s == ''}).join(' ')
    result += ")"
    return result;
  }
  
  function L(){
    var args = $A(arguments)
    if(args.all(function(arg){
      return arg !== undefined && arg.strip() != ''
    })){
      return lisp.apply(null, args)
    }
    else{
      return ""
    }
  }
  
  function V(id){
    var element = $(id)
    if(element){
      if(element.value !== undefined){
        return element.value
      }
      else{
        throw 'no value property:' + id 
      }
    }
    else{
      throw 'wrong id:' + id
    }
  }
  
  function T(element){
    return element.collectTextNodes().strip()
  }
  
  function row2Lisp(row, prefix, index){
    var labelDiv = row.down('.label')
    var name = labelDiv.readAttribute('name') || T(labelDiv)
    var label = name.gsub('-', '_')
    var fieldElement = row.down('.field')
    var value;
    if(fieldElement.hasClassName('vector3')){
      value = vector3([prefix, label + "XYZ", index].join('_'))
    }
    else{
      value = V([prefix, label, index].join('_'))
    }
    return L(name, value)
  }
  
  function vector3(idTemplate){
    var defined = true;
    var result = $w('x y z').map(function(c){
      var id = idTemplate.gsub('XYZ', c)
      var val = V(id)
      if(val == ''){
        defined = false
      }
      return val;  
    }).join(' ')
    if(defined){
      return result
    }
    else{
      return ""
    }
  }

  var generators = {
    parameters: function(){
      var result = ""
      $$('#parameter_container div').each(function(row){
        var label = row.down('.label').value
        var value = row.down('.value').value
        var def;
        if(isNumber(value)){
          def = "define-param"
        }
        else{
          def = "define"
        }
        result += L(def, label, value).nl()
      })
      return result;
    },
    computational_cell: function(){
      var result = '';
      result += L('set! geometry-lattice', L('make lattice', L('size', vector3('latice_size_XYZ')))).nl()
      result += L('set! resolution', V('resolution')).nl()
      result += L('set-param! k-point', L('vector3', vector3('k_point_XYZ'))).nl()
      return result;
    },
    pml: function(){
      var result = ''
      $$('#pml_container .sub2panel').each(function(element, index){
        result += "\n  " + lisp('make pml', 
          L('thickness', V('pml_thickness_' + index)), 
          L('direction', V('pml_direction_' + index)), 
          L('side', V('pml_side_' + index)), 
          L('strength', V('strength_' + index)), 
          L('R-asymptotic', V('r_asymptotic_' + index)),
          L('pml-profile', V('pml_profile_' + index)))
      })
      result = L('set! pml-layers', L('list', result))
      return result
    },
    symmetry: function(){
      var result = ''
      $$('#symmetry_container tr[id^=sym_]').each(function(tr, index){
        
        result += "\n" +
          lisp('make', V('sym_type_' + index), 
            lisp('direction', V('sym_direction_' + index)), 
            L('phase', V('sym_phase_' + index)));
      })
      result = L('set! symmetries', L('list', result))
      return result;
    },
    materials: function(){
      var result = ''
      $$('#material_container tr[id^=material_]').each(function(tr, index){
        
        result += "\n" +
          lisp('define', V('medium_name_' + index), 
            lisp('epsilon', V('medium_epsilon_' + index)));
      })
      
      return result;
    },
    geometry: function(){
      var result = ''
      $$('#objects .sub2panel').each(function(element, index){
        var type = T(element.down('.sub2panel_title'))
        var attrResult = ''
        element.select('.prop_row').each(function(row){
          attrResult += row2Lisp  (row, type, index)
        })
        result += "\n" + L('make', type, attrResult)
      })
      result = L('set! geometry', L('list', result))
      return result
    },
    source: function(){
      var result = ''
      $$('#source_container .sub2panel').each(function(panel){
        var index = getIndex(panel.id)
        var source_type = radio_value('source_type_' + index)
        var src_result = ''
        panel.select('.source_fields .' + source_type).each(function(row){
          src_result += row2Lisp(row, 'source', index)
        })
        panel_result = L('src', L('make', source_type + '-src', src_result)).prefix("\n\t\t")
        panel.select('.others .prop_row').each(function(row){
          if(!row.down('input').id.startsWith('source_type')){
            panel_result += row2Lisp(row, 'source', index).prefix("\n\t\t")
          }
        })
        result += L('make source', panel_result).prefix("\n\t")
      })
      result = L('!set sources', L('list', result))
      return result.strip()
    },
    flux: function(){
      var result = ''
      var flux_names = []
      $$('#flux_container .sub2panel').each(function(panel){
        var index = getIndex(panel.id)
        var flux_name = 'flux' + index
        flux_names.push(flux_name)
        result += L('define', flux_name, L('add-flux', V('flux_fcen_' + index), V('flux_df_' + index), V('flux_nfreq_' + index), 
          L('make flux-region', L('center', vector3('flux_centerXYZ_' + index)), L('size', vector3('flux_sizeXYZ_' +index))
        ))).nl()
      })
      result += L('display-fluxes', flux_names.join(' '))
      return result;
    },
    run: function(){
      var result = []
      var run_type = radio_value('run_type')
      var condition = V('run_cond')
      var step_function = V('run_step_function')
      
      result.push(condition)
      
      if($('run_output_epsilon').checked){
        result.push('(at-beginning output-epsilon)')
      }
      result.push(step_function)
      if(condition && run_type == 'sources'){
        run_type += '+'
      }
      result = L('run-' + run_type, result.join(' '))
      return result
    }
    
  }

  $$('.group_title .play').each(function (e){
    e.observe('mouseover', function(event){
      showCode(event)
    })
    e.observe('mouseout', function(event){
      hideCode(event)
    })
  })

  function showCode(event){
    var panel = event.element().up('.group')
    var content = generators[panel.id]();
    //panel.setStyle("border: solid")
    var offset = panel.cumulativeOffset()
    panel.appendChild(NodeBuilder(
      ['pre', {'class': 'code', style: 'position: absolute; left: ' + 10  + 'px; top: ' +  (offset[1] + 20) + 'px'}, content]
    ))
  }
  
  function hideCode(event){
    event.element().up('.group').down('.code').remove()
  }

  var animationDuration = 0.3;
  function openAnimation(element, finishFunction){
    var finishFunctionOrNope = finishFunction || Prototype.K
    if(element.tagName.toUpperCase() == 'TR'){
      element.appear({queue: 'end', duration: animationDuration, afterFinish: finishFunctionOrNope})
    }
    else{
      element.blindDown({queue: 'end', duration: animationDuration, afterFinish: finishFunctionOrNope})
    }
    return element
  }
  
  function closeAnimation(element, finishFunction){
    var finishFunctionOrNope = finishFunction || Prototype.K
    if(element.tagName.toUpperCase() == 'TR'){
      element.fade({queue: 'end', duration: animationDuration, afterFinish: finishFunctionOrNope})
    }
    else{
      element.blindUp({queue: 'end', duration: animationDuration, afterFinish: finishFunctionOrNope})
    }
    return element;
  }
  
  function toggleEditor(id){
    var options = {queue: 'end', duration: animationDuration}
    var toggle = true
    if($(id).visible()){
      if($(id).value != ''){
        confirm_dialog('confirm', 'The content will also be deleted', function(){
          $(id).value = '';
          $(id).blindUp(options)
        });
      }
      else{
        $(id).blindUp(options)
      }
    }
    else{
      $(id).blindDown({queue: 'end', duration: animationDuration})
    }
  }
  
  function new_parameter(){
    var index = $('parameter_container').childElements().size()
    openAnimation($('parameter_container').appendChild(
      NodeBuilder(
        ["div", {'class': 'parameter_row', id: 'parameter_' + index},
          ["input", {type: "text" , 'class': 'label', id: "parameter_name_" + index}],
          ["input", {type: "text", 'class': 'value', id: "parameter_value_" + index}],
          ["a", {'class': 'clickable minus', onclick: "remove_parameter(event)"}]
        ]
      )
    ).setStyle("display:none"))
  }
  
  function remove_parameter(event){
    var container = event.element().up('#parameter_container')
    event.element().up('div').remove();
    reindexing_selected_children(container, "div[id^='parameter_']")
  }
  
  

  function new_symmetry(event, sym_type){
    var index = $('symmetry_container').childElements().size() - 1
    openAnimation($('symmetry_container').appendChild(
      NodeBuilder(
        ["tr", {id: 'sym_' + index},
          ["td", {},
            ["input", {type: 'hidden', id: 'sym_type_' + index, value: sym_type}],
            event.element().firstChild.nodeValue
          ],
          ["td", {},
            ['input', {type: 'text', id: 'sym_direction_' + index}]
          ],
          ["td", {},
            ['input', {type: 'text', id: 'sym_phase_' + index}]
          ],
          ["td", {}, 
            ['a', { 'class': 'minus clickable', onClick: "removeRow(event, 'sym');"}]
          ]
        ]
      )
    ).setStyle("display:none")).previous().removeClassName('not_alone')
  }
  
  function new_material(){
    var index = $('material_container').childElements().size() - 1
    var material = openAnimation($('material_container').appendChild(
      NodeBuilder(
        ["tr", {id: 'material_' + index},
          ["td", {},
            ["input", {type: 'text', id: 'medium_name_' + index}]
          ],
          ["td", {},
            ['input', {type: 'text', id: 'medium_epsilon_' + index}]
          ],
          ["td", {}, 
            ['a', { 'class': 'minus clickable', onClick: "removeRow(event, 'medium');"}]
          ]
        ]
      ).setStyle("display: none")));
      
   material.previous().removeClassName('not_alone')
   return material;
        
  }
  
  function removeRow(event, prefix){
    var row = event.element().up('tr')
    closeAnimation(row, function(){
      var container = event.element().up('tbody')
      row.remove();
      reindexing_selected_children(container, "tr[id^='" + prefix + "_']")
      if(container.childElements().size() == 1){
        container.firstDescendant().addClassName('not_alone')
      }
    })
    
  }
  
  function new_object(event, object_type){
    var prototype_id = object_type;
    var clone = $(prototype_id + "_prototype").cloneNode(true);
    var index = $('objects').childElements().size();
    reindexing(clone, 1000001);
    $('objects').appendChild(clone).setStyle("display: none");
    reindexing(clone, index);
    openAnimation(clone);
    return clone.id;
  }
  
  
  function checkSourceSubclasses(container_id){
    var index = getIndex(container_id)
    var source_type = radio_value('source_type_' + index) 
    if(!source_type){
      source_type = 'continuous'
      $('source_type_continuous_' + index).checked = true
    }
    $(container_id).select(".source_fields .prop_row").each(function(e){
      if(e.hasClassName(source_type)){
        if(!e.visible()){
          e.show()
        }
      }
      else{
        if(e.visible()){
          e.hide()
        }
      }
    }) 
  }
  
  function newSource(){
    var clone = newSub2panel('source');
    
    checkSourceSubclasses(clone.id)

    $(clone.id).select('input[type="radio"]').each(function(e){
      e.observe('change', function(event){
        checkSourceSubclasses(event.element().up('.sub2panel').id)
      });
    });
    return clone.id;
  }  
  
  function newSub2panel(prototype_prefix){
    var clone = $(prototype_prefix + "_prototype").cloneNode(true);
    var container = $(prototype_prefix + '_container');
    var index = container.select('.sub2panel').size();
    reindexing(clone, 1000001);
    clone.setStyle('display: none');
    container.appendChild(clone);
    reindexing(clone, index);
    //Effect.BlindDown(clone.id, { duration: 0.5 });
    openAnimation(clone)
    return clone;    
  }
  
  function removeSub2panel(event){
    var container = event.element().up('.sub2panel').parentNode;
    Effect.BlindUp(event.element().up(".sub2panel"), {afterFinish: function(){
      event.element().up('.sub2panel').remove();
      reindexing_selected_children(container, "sub2panel")
    },
    duration: 0.5})
  }

  function file_upload(result){
    //alert(result);
    if(result !== ''){
      //
    }
  }


  function buildCommandArgs(){
    return "meep f g";
  }
  
  
  function addAccordionDynamism(){
    $$(".group .group_title").each(function(e){
      e.observe("click", function(event){
      event.element().siblings().each(function(item){
        item.toggle()
      })
    })
    })
    
  }


  function prepareSubmit(){
  
    $('command_args').value = buildCommandArgs();
    $('display_str').value = $('command_args').value
  }
  
  $('partial_form').preInit = function(settings){
    
  }

  $('partial_form').init = function (){
    $$('.hidden_prototype').invoke('hide');
    //$$('.long_desc').invoke('hide');
    $$('input').each(function (e){
      var ph = e.readAttribute('valid_if');
      if(ph){
        e.writeAttribute('placeholder', translate4human(ph));
      }
    });
    
    $$('.long_desc, .source_editor').invoke('toggle');
    
    
    //addAccordionDynamism();
  }
  

